<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TextBox</name>
    </assembly>
    <members>
        <member name="T:FzFlexBox.Behavior">
            <summary>
              Base class for all behavior classes in this namespace.
              It is designed to represent a behavior object that may be associated with a TextBoxBase object. </summary>
            <seealso cref="T:FzFlexBox.MaskedBehavior"/>
            <seealso cref="T:FzFlexBox.DateBehavior"/>
            <seealso cref="T:FzFlexBox.TimeBehavior"/>
            <seealso cref="T:FzFlexBox.DateTimeBehavior"/>
        </member>
        <member name="F:FzFlexBox.Behavior.m_textBox">
            <summary> The TextBox object associated with this Behavior. </summary>
        </member>
        <member name="F:FzFlexBox.Behavior.m_flags">
            <summary> The flags turned on for this Behavior. </summary>
        </member>
        <member name="F:FzFlexBox.Behavior.m_noTextChanged">
            <summary> When true it indicates that HandleTextChanged should behave as if no text had changed and not call <see cref="M:FzFlexBox.Behavior.UpdateText"/>. </summary>
        </member>
        <member name="F:FzFlexBox.Behavior.m_selection">
            <summary> Helper object used to manipulate the selection of the TextBox object. </summary>
        </member>
        <member name="F:FzFlexBox.Behavior.m_errorProvider">
            <summary> The object used to show a blinking icon (with an error) next to the control. </summary>		
        </member>
        <member name="F:FzFlexBox.Behavior.m_errorCaption">
            <summary> The caption to use for all error message boxes. </summary>		
        </member>
        <member name="F:FzFlexBox.Behavior.m_textoantigo">
            <summary> The caption to use for all error message boxes. </summary>		
        </member>
        <member name="M:FzFlexBox.Behavior.#ctor(System.Windows.Forms.TextBoxBase,System.Boolean)">
            <summary>
              Initializes a new instance of the Behavior class by associating it with a TextBoxBase derived object. </summary>
            <param name="textBox">
              The TextBoxBase object to associate with this behavior.  It must not be null. </param>
            <param name="addEventHandlers">
              If true, the textBox's event handlers are tied to the corresponding methods on this behavior object. </param>
            <exception cref="T:System.ArgumentNullException">textBox is null. </exception>
            <remarks>
              This constructor is <c>protected</c> since this class is only meant to be used as a base for other behaviors. </remarks>
            <seealso cref="T:System.Windows.Forms.TextBoxBase"/>	
            <seealso cref="M:FzFlexBox.Behavior.AddEventHandlers"/>	
        </member>
        <member name="M:FzFlexBox.Behavior.#ctor(FzFlexBox.Behavior)">
            <summary>
              Initializes a new instance of the Behavior class by copying it from 
              another Behavior object. </summary>
            <param name="behavior">
              The Behavior object to copied (and then disposed of).  It must not be null. </param>
            <exception cref="T:System.ArgumentNullException">behavior is null. </exception>
            <remarks>
              This constructor is <c>protected</c> since this class is only meant to be used as a base for other behaviors. 
              After the behavior.TextBox object is copied, Dispose is called on the behavior parameter. </remarks>
            <seealso cref="P:FzFlexBox.Behavior.TextBox"/>	
            <seealso cref="M:FzFlexBox.Behavior.Dispose"/>	
        </member>
        <member name="M:FzFlexBox.Behavior.HandleTextChangingBySelection(System.Object,System.EventArgs)">
            <summary>
              Handles the text changing as a result of direct manipulation of the selection. </summary>
            <remarks>
              This method sets m_noTextChanged flag to true so that UpdateText is not called 
              unnecessarily inside HandleTextChanged. </remarks>
        </member>
        <member name="M:FzFlexBox.Behavior.GetValidText">
            <summary>
              Retrieves the textbox's text in valid form. </summary>
            <returns>
              If the textbox's text is valid, it is returned; otherwise a valid version of it is returned. </returns>
            <remarks>
              This method is designed to be overriden by derived Behavior classes.
              Here it just returns the textbox's text. </remarks>
        </member>
        <member name="M:FzFlexBox.Behavior.UpdateText">
            <summary>
              Checks if the textbox's text is valid and if not updates it with a valid value. </summary>
            <returns>
              If the textbox's text is updated (because it wasn't valid), the return value is true; otherwise it is false. </returns>
            <remarks>
              This method is used by derived classes to ensure the textbox's text is kept valid. </remarks>
        </member>
        <member name="M:FzFlexBox.Behavior.ToInt(System.String)">
            <summary>
              Converts the given text to an integer. </summary>
            <returns>
              The return value is the text as an integer, or 0 if the conversion cannot be done. </returns>
            <remarks>
              This method serves as a convenience for derived Behavior classes that
              need to convert a string to an integer without worrying about a System.FormatException 
              exception being thrown. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.ToDouble(System.String)"/>	
        </member>
        <member name="M:FzFlexBox.Behavior.ToDouble(System.String)">
            <summary>
              Converts the given text to a double. </summary>
            <returns>
              The return value is the text as a double, or 0 if the conversion cannot be done. </returns>
            <remarks>
              This method serves as a convenience for derived Behavior classes that
              need to convert a string to a double without worrying about a System.FormatException 
              exception being thrown. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.ToInt(System.String)"/>	
        </member>
        <member name="M:FzFlexBox.Behavior.ModifyFlags(System.Int32,System.Boolean)">
            <summary>
              Adds or removes flags from the behavior. </summary>
            <param name="flags">
              The bits to be turned on (ORed) or turned off in the internal flags member. </param>
            <param name="addOrRemove">
              If true the flags are added, otherwise they're removed. </param>
            <remarks>
              This method is a convenient way to modify the <see cref="P:FzFlexBox.Behavior.Flags"/> property without overwriting its value.
              If the internal flags value is changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </remarks>
            <seealso cref="P:FzFlexBox.Behavior.Flags"/>
        </member>
        <member name="M:FzFlexBox.Behavior.HasFlag(System.Int32)">
            <summary>
              Checks if a flag value is set (turned on). </summary>
            <param name="flag">
              The flag to check. </param>
            <returns>
              If the flag is set, the return value is true; otherwise it is false. </returns>
            <seealso cref="P:FzFlexBox.Behavior.Flags"/>
        </member>
        <member name="M:FzFlexBox.Behavior.ShowErrorMessageBox(System.String)">
            <summary>
              Shows an error message box. </summary>
            <param name="message">
              The message to show. </param>
            <remarks>
              Although doing so is not expected, this method may be overriden by derived classes. </remarks>
        </member>
        <member name="M:FzFlexBox.Behavior.ShowErrorIcon(System.String)">
            <summary>
              Shows a blinking icon next to the textbox with an error message. </summary>
            <param name="message">
              The message to show when the cursor is placed over the icon. </param>
            <remarks>
              Although doing so is not expected, this method may be overriden by derived classes. </remarks>
        </member>
        <member name="M:FzFlexBox.Behavior.TraceLine(System.String)">
            <summary>  
              If TRACE_AMS (and TRACE) are defined for the compiler, a message line is sent to the tracer. </summary>
            <param name="message">
              The message line to trace. </param>
            <remarks>
              This method is used to help diagnose problems.  It's called at the beginning of all 
              event handlers (the ones that begin with Handle) to trace the program's execution. </remarks>
        </member>
        <member name="M:FzFlexBox.Behavior.Validate">
            <summary>
              Checks if the textbox's value is valid and if not proceeds according to the behavior's <see cref="P:FzFlexBox.Behavior.Flags"/>. </summary>
            <returns>
              If the validation succeeds, the return value is true; otherwise it is false. </returns>
            <remarks>
              This method is automatically called by the textbox's <see cref="E:System.Windows.Forms.Control.Validating"/> event if its 
              <see cref="P:System.Windows.Forms.Control.CausesValidation"/> property is set to true.
              It delegates to the overridable version of Validate. </remarks>
            <seealso cref="E:System.Windows.Forms.Control.Validating"/>
        </member>
        <member name="M:FzFlexBox.Behavior.Validate(System.Int32,System.Boolean)">
            <summary>
              Checks if the textbox's value is valid and if not proceeds according to the given set of flags. </summary>
            <param name="flags">
              The combination of zero or more <see cref="T:FzFlexBox.ValidatingFlag"/> values added (ORed) together.
              This determines if the value should be checked for being empty, invalid, or neither, and then what action to take. </param>
            <param name="setFocusIfNotValid">
              If true and the validation fails (based on the flags parameter), the focus is placed on the textbox. </param>
            <returns>
              If the validation succeeds, the return value is true; otherwise it is false. </returns>
            <remarks>
              This method is indirectly called by the textbox's <see cref="E:System.Windows.Forms.Control.Validating"/> event if its 
              <see cref="P:System.Windows.Forms.Control.CausesValidation"/> property is set to true.
              Although doing so is not expected, this method may be overriden to provide extra validation in derived classes. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.IsValid"/>
            <seealso cref="E:System.Windows.Forms.Control.Validating"/>
        </member>
        <member name="M:FzFlexBox.Behavior.IsValid">
            <summary>
              Checks if the textbox contains a valid value. </summary>
            <returns>
              If the value is valid, the return value is true; otherwise it is false. </returns>
            <remarks>
              This method is called by the <see cref="M:FzFlexBox.Behavior.Validate"/> to check validity. Here it just returns true, 
              but it is meant to be overriden by Behavior classes where either the allowed range of values is not
              controlled as the user types (e.g. NumericBehavior, TimeBehavior), or the value is not considered 
              valid until the user has entered all the required characters (e.g. DateBehavior, TimeBehavior). </remarks>
        </member>
        <member name="M:FzFlexBox.Behavior.AddEventHandlers">
            <summary>
              Attaches several textBox event handlers to their corresponding virtual methods of the Behavior class. </summary>
            <remarks>
              To alter a textBox's behavior, these events may be needed: KeyDown, KeyPress, TextChanged, Validating, and LostFocus.
              This method binds those events to these virtual methods: HandleKeyDown, HandleKeyPress, HandleTextChanged, HandleValidating, and HandleLostFocus.
              Derived behavior classes may override any of these methods to accomodate their own requirements. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.HandleKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)"/>
            <seealso cref="M:FzFlexBox.Behavior.HandleKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)"/>
            <seealso cref="M:FzFlexBox.Behavior.HandleTextChanged(System.Object,System.EventArgs)"/>
            <seealso cref="M:FzFlexBox.Behavior.HandleLostFocus(System.Object,System.EventArgs)"/>
            <seealso cref="M:FzFlexBox.Behavior.HandleGotFocus(System.Object,System.EventArgs)"/>
            <seealso cref="M:FzFlexBox.Behavior.RemoveEventHandlers"/>
        </member>
        <member name="M:FzFlexBox.Behavior.RemoveEventHandlers">
            <summary>
              Dettaches several textBox event handlers from their corresponding virtual methods of the Behavior class. </summary>
            <remarks>
              This method does the opposite of <see cref="M:FzFlexBox.Behavior.AddEventHandlers"/> and it allows a Behavior object to be associated with
              a textBox and later replaced by a different Behavior object. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.AddEventHandlers"/>
            <seealso cref="M:FzFlexBox.Behavior.Dispose"/>
        </member>
        <member name="M:FzFlexBox.Behavior.Dispose">
            <summary>
              Disposes of the object by dettaching the textBox event handlers from their corresponding virtual 
              methods of the Behavior class and setting the Textbox to null. </summary>
            <seealso cref="M:FzFlexBox.Behavior.RemoveEventHandlers"/>
        </member>
        <member name="M:FzFlexBox.Behavior.HandleKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
              Handles keyboard presses inside the textbox. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is virtual so that it can be overriden by derived classes to accomodate their own behavior. 
              Here it just sets e.Handled to false so that the keydown can happen. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.AddEventHandlers"/>
            <seealso cref="E:System.Windows.Forms.Control.KeyDown"/>
        </member>
        <member name="M:FzFlexBox.Behavior.HandleKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
              Handles keyboard presses inside the textbox. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is virtual so that it can be overriden by derived classes to accomodate their own behavior.
              Here it just sets e.Handled to false so that the keypress can happen. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.AddEventHandlers"/>
            <seealso cref="E:System.Windows.Forms.Control.KeyPress"/>
        </member>
        <member name="M:FzFlexBox.Behavior.HandleTextChanged(System.Object,System.EventArgs)">
            <summary>
              Handles changes in the textbox text. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is virtual so that it can be overriden by derived classes to accomodate their own behavior.
              Here it calls <see cref="M:FzFlexBox.Behavior.UpdateText"/> (unless the internal  <see cref="F:FzFlexBox.Behavior.m_noTextChanged"/> flag is <c>true</c>) 
              to ensure the text is kept valid. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.AddEventHandlers"/>
            <seealso cref="E:System.Windows.Forms.Control.TextChanged"/>
        </member>
        <member name="M:FzFlexBox.Behavior.HandleValidating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
              Handles when the control is being validated as a result of losing its focus. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method calls <see cref="M:FzFlexBox.Behavior.Validate"/> to determine if the textbox's value is valid and
              the return value is used to set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel">e.Cancel</see>.  
              Although not expected, this method may be overriden by derived classes to accomodate their own behavior. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.AddEventHandlers"/>
            <seealso cref="M:FzFlexBox.Behavior.Validate"/>
            <seealso cref="E:System.Windows.Forms.Control.Validating"/>
        </member>
        <member name="M:FzFlexBox.Behavior.HandleLostFocus(System.Object,System.EventArgs)">
            <summary>
              Handles when the control has lost its focus. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is virtual so that it can be overriden by derived classes to accomodate their own behavior.
              Here it does nothing. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.AddEventHandlers"/>
            <seealso cref="E:System.Windows.Forms.Control.LostFocus"/>
        </member>
        <member name="M:FzFlexBox.Behavior.HandleGotFocus(System.Object,System.EventArgs)">
            <summary>
              Handles when the control receives the focus. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is virtual so that it can be overriden by derived classes to accomodate their own behavior.
              Here it does nothing. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.AddEventHandlers"/>
            <seealso cref="E:System.Windows.Forms.Control.GotFocus"/>
        </member>
        <member name="M:FzFlexBox.Behavior.HandleBindingChanges(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
              Handles when changes are made to the DataBindings property of the control. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is virtual so that it can be overriden by derived classes to accomodate their own behavior.
              Here it checks if a Binding object has been added to the DataBindings collection
              so that its Parse event can be wired to the <see cref="M:FzFlexBox.Behavior.HandleBindingFormat(System.Object,System.Windows.Forms.ConvertEventArgs)"/> and 
              <see cref="M:FzFlexBox.Behavior.HandleBindingParse(System.Object,System.Windows.Forms.ConvertEventArgs)"/>  methods.  </remarks>
            <seealso cref="M:FzFlexBox.Behavior.HandleBindingFormat(System.Object,System.Windows.Forms.ConvertEventArgs)"/>
            <seealso cref="M:FzFlexBox.Behavior.HandleBindingParse(System.Object,System.Windows.Forms.ConvertEventArgs)"/>
            <seealso cref="E:System.Windows.Forms.BindingsCollection.CollectionChanged"/>
        </member>
        <member name="M:FzFlexBox.Behavior.HandleBindingFormat(System.Object,System.Windows.Forms.ConvertEventArgs)">
            <summary>
              Handles when the value of the object bound to this control needs to be formatted to be 
              placed on the control. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is virtual so that it can be overriden by derived classes to accomodate their own behavior.
              Here it does nothing. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.HandleBindingChanges(System.Object,System.ComponentModel.CollectionChangeEventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Binding.Format"/>
        </member>
        <member name="M:FzFlexBox.Behavior.HandleBindingParse(System.Object,System.Windows.Forms.ConvertEventArgs)">
            <summary>
              Handles when the control's text gets parsed to be converted to the type expected by the 
              object that it's bound to. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is virtual so that it can be overriden by derived classes to accomodate their own behavior.
              Here it checks if the control's text is empty so that it can set it to DBNull.Value. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.HandleBindingChanges(System.Object,System.ComponentModel.CollectionChangeEventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Binding.Parse"/>
        </member>
        <member name="M:FzFlexBox.Behavior.MessageBeep(System.Windows.Forms.MessageBoxIcon)">
            <summary>
              Makes a beeping sound. </summary>
            <param name="mbi">
              The type of sound to make, based on the situation. </param>
        </member>
        <member name="P:FzFlexBox.Behavior.TextBox">
            <summary>
              Gets or sets the TextBoxBase object associated with this Behavior object (which is not allowed to be null). </summary>
            <exception cref="T:System.ArgumentNullException">TextBox is set to null. </exception>
            <remarks>
              Before the TextBoxBase object gets replaced, its event handlers are detached from this behavior object. 
              Then they're attached to the new object. </remarks>
        </member>
        <member name="P:FzFlexBox.Behavior.Flags">
            <summary>
              Gets or sets the flags associated with this Behavior object. </summary>
            <remarks>
              This property serves as a convenience for derived Behavior classes
              which can use it to store binary attributes (flags) inside its individual bits. 
              If this property is changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.ModifyFlags(System.Int32,System.Boolean)"/>
        </member>
        <member name="P:FzFlexBox.Behavior.ErrorMessage">
            <summary>
              Gets the error message used to notify the user to enter a valid value. </summary>
            <remarks>
              This property is used by <see cref="M:FzFlexBox.Behavior.Validate"/> to retrieve the message to 
              display in a message box or icon if the validation fails, depending on the flags set by the user.
              Here it just shows a generic error message, but it is meant to be overriden by 
              Behavior classes where either the allowed range of values is not controlled as 
              the user types (e.g. NumericBehavior, TimeBehavior), or the value is not considered 
              valid until the user has entered all the required characters (e.g. DateBehavior, TimeBehavior). </remarks>
            <seealso cref="M:FzFlexBox.Behavior.Validate"/>
            <seealso cref="M:FzFlexBox.Behavior.IsValid"/>
            <seealso cref="P:FzFlexBox.Behavior.ErrorCaption"/>
        </member>
        <member name="P:FzFlexBox.Behavior.ErrorCaption">
            <summary>
              Gets or sets the caption to use for all error message boxes. </summary>
            <remarks>
              This property may be used to change the default caption (<see cref="P:System.Windows.Forms.Application.ProductName"/>) used
              for all error message boxes shown via the <see cref="M:FzFlexBox.Behavior.ShowErrorMessageBox(System.String)"/> method. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.ShowErrorMessageBox(System.String)"/>
        </member>
        <member name="T:FzFlexBox.ValidatingFlag">
            <summary>
              Values that may be added/removed to the <see cref="P:FzFlexBox.Behavior.Flags"/> property related 
              to validating the textbox. </summary>
            <seealso cref="M:FzFlexBox.Behavior.ModifyFlags(System.Int32,System.Boolean)"/>
            <seealso cref="M:FzFlexBox.Behavior.HasFlag(System.Int32)"/>
            <seealso cref="M:FzFlexBox.Behavior.Validate"/>
            <seealso cref="M:FzFlexBox.Behavior.HandleValidating(System.Object,System.ComponentModel.CancelEventArgs)"/>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.Beep_IfInvalid">
            <summary> If the value is not valid, make beeping sound. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.Beep_IfEmpty">
            <summary> If the value is empty, make beeping sound. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.Beep">
            <summary> If the value is empty or not valid, make beeping sound. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.SetValid_IfInvalid">
            <summary> If the value is not valid, change its value to something valid. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.SetValid_IfEmpty">
            <summary> If the value is empty, change its value to something valid. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.SetValid">
            <summary> If the value is empty or not valid, change its value to something valid. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.ShowMessage_IfInvalid">
            <summary> If the value is not valid, show an error message box. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.ShowMessage_IfEmpty">
            <summary> If the value is empty, show an error message box. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.ShowMessage">
            <summary> If the value is empty or not valid, show an error message box. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.ShowIcon_IfInvalid">
            <summary> If the value is not valid, show a blinking icon next to it. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.ShowIcon_IfEmpty">
            <summary> If the value is empty, show a blinking icon next to it. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.ShowIcon">
            <summary> If the value is empty or not valid, show a blinking icon next to it. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.Max_IfInvalid">
            <summary> Combination of all IfInvalid flags (above); used internally by the program. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.Max_IfEmpty">
            <summary> Combination of all IfEmpty flags (above); used internally by the program. </summary>
        </member>
        <member name="F:FzFlexBox.ValidatingFlag.Max">
            <summary> Combination of all flags; used internally by the program. </summary>
        </member>
        <member name="T:FzFlexBox.MaskedBehavior">
            <summary>
              Behavior class which restricts input based on a mask containing one or more special symbols. </summary>
            <remarks>
              This class is useful for values with a rigid format, such as phone numbers, 
              social security numbers, or zip codes. </remarks>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.#ctor(System.Windows.Forms.TextBoxBase)">
            <summary>
              Initializes a new instance of the MaskedBehavior class by associating it with a TextBoxBase derived object. </summary>
            <param name="textBox">
              The TextBoxBase object to associate with this behavior.  It must not be null. </param>
            <exception cref="T:System.ArgumentNullException">textBox is null. </exception>
            <remarks>
              This constructor sets the mask to an empty string, so that anything is allowed. </remarks>
            <seealso cref="P:FzFlexBox.MaskedBehavior.Mask"/>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.#ctor(System.Windows.Forms.TextBoxBase,System.String)">
            <summary>
              Initializes a new instance of the MaskedBehavior class by associating it with a TextBoxBase derived object and setting its mask. </summary>
            <param name="textBox">
              The TextBoxBase object to associate with this behavior.  It must not be null. </param>
            <param name="mask">
              The mask string to use for validating and/or formatting the characters entered by the user. 
              By default, the <c>#</c> symbol is configured to represent a digit placeholder on the mask. </param>
            <example><c>MaskedBehavior behavior = new MaskedBehavior(txtPhoneNumber, "###-####"); </c></example>
            <exception cref="T:System.ArgumentNullException">textBox is null. </exception>
            <seealso cref="P:FzFlexBox.MaskedBehavior.Mask"/>
            <seealso cref="P:FzFlexBox.MaskedBehavior.Symbols"/>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.#ctor(FzFlexBox.MaskedBehavior)">
            <summary>
              Initializes a new instance of the MaskedBehavior class by copying it from 
              another MaskedBehavior object. </summary>
            <param name="behavior">
              The MaskedBehavior object to copied (and then disposed of).  It must not be null. </param>
            <exception cref="T:System.ArgumentNullException">behavior is null. </exception>
            <remarks>
              After the behavior.TextBox object is copied, Dispose is called on the behavior parameter. </remarks>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.GetValidText">
            <summary>
              Retrieves the textbox's text in valid form. </summary>
            <returns>
              If the textbox's text is valid, it is returned; otherwise a valid version of it is returned. </returns>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.HandleKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
              Handles keyboard presses inside the textbox. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is overriden from the Behavior class and it  
              handles the textbox's KeyDown event. </remarks>
            <seealso cref="E:System.Windows.Forms.Control.KeyDown"/>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.HandleKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
              Handles keyboard presses inside the textbox. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is overriden from the Behavior class and it  
              handles the textbox's KeyPress event. </remarks>
            <seealso cref="E:System.Windows.Forms.Control.KeyPress"/>
        </member>
        <member name="P:FzFlexBox.MaskedBehavior.Mask">
            <summary>
              Gets or sets the mask. </summary>
            <remarks>
              This string is used for validating and/or formatting the characters entered by the user. 
              By default, the <c>#</c> symbol is configured to represent a digit placeholder on the mask. 
              Thus, each '#' symbol in the mask represents a digit, and any other characters between the 
              # symbols are automatically filled-in as the user types digits. 
              <para>
              If this property is changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </para></remarks>
            <seealso cref="P:FzFlexBox.MaskedBehavior.Symbols"/>
        </member>
        <member name="P:FzFlexBox.MaskedBehavior.Symbols">
            <summary>
              Gets the ArrayList of Symbol objects. </summary>
            <remarks>
              This array will initially contain one record: the one for the <c>#</c> symbol, which represents a digit placeholder on the mask. 
              However, more Symbol objects can be easily added to the array to make the mask more powerful. </remarks>
            <example><code>
              MaskedBehavior behavior = new MaskedBehavior(txtSerialNumber, "^#^-^##-###");
              
              // Add the ^ symbol to only allow letters and to convert them to upper-case. 
              MaskedBehavior.Symbol.ValidatorMethod validator = new MaskedBehavior.Symbol.ValidatorMethod(Char.IsLetter); 
              MaskedBehavior.Symbol.FormatterMethod formatter = new MaskedBehavior.Symbol.FormatterMethod(Char.ToUpper)));
              behavior.Symbols.Add(new MaskedBehavior.Symbol('^', validator, formatter)); </code></example>
            <seealso cref="P:FzFlexBox.MaskedBehavior.Mask"/>
            <seealso cref="T:FzFlexBox.MaskedBehavior.Symbol"/>
        </member>
        <member name="P:FzFlexBox.MaskedBehavior.NumericText">
            <summary>
              Retrieves the textbox's value without any non-numeric characters. </summary>
        </member>
        <member name="T:FzFlexBox.MaskedBehavior.Symbol">
            <summary>
              Represents a character which may be added to the mask and then interpreted by the <see cref="T:FzFlexBox.MaskedBehavior"/> class 
              to validate the input from the user and possibly format it to something else. </summary>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.Symbol.#ctor(System.Char)">
            <summary>
              Initializes a new instance of the Symbol class by associating it with a character. </summary>
            <param name="symbol">
              The character that is represented by this object in the mask string. </param>
            <remarks>
              This constructor sets the validator and formatter methods to null. </remarks>
            <seealso cref="T:FzFlexBox.MaskedBehavior"/>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.Symbol.#ctor(System.Char,FzFlexBox.MaskedBehavior.Symbol.ValidatorMethod)">
            <summary>
              Initializes a new instance of the Symbol class by associating it with a character and 
              a validator method. </summary>
            <param name="symbol">
              The character that is represented by this object in the mask string. </param>
            <param name="validator">
              The method called to check if the character entered by the user corresponds 
              with this object's symbol. </param>
            <remarks>
              This constructor sets the formatter method to null, meaning that the character 
              entered by the user is not formatted. </remarks>
            <seealso cref="T:FzFlexBox.MaskedBehavior"/>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.Symbol.#ctor(System.Char,FzFlexBox.MaskedBehavior.Symbol.ValidatorMethod,FzFlexBox.MaskedBehavior.Symbol.FormatterMethod)">
            <summary>
              Initializes a new instance of the Symbol class by associating it with a character and 
              a validator method. </summary>
            <param name="symbol">
              The character that is represented by this object in the mask string. </param>
            <param name="validator">
              The method called to check if the character entered by the user corresponds 
              with this object's symbol. </param>
            <param name="formatter">
              The method called to format the character entered by the user to a different character, if needed. </param>
            <seealso cref="T:FzFlexBox.MaskedBehavior"/>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.Symbol.Validate(System.Char)">
            <summary>
              Checks if the character entered by the user corresponds with this object's symbol. </summary>
            <param name="c">
              The character entered by the user that needs to be checked. </param>
            <returns>
              If the character entered by the user is a valid representation of the symbol, 
              the return value is true; otherwise it is false. </returns>
            <remarks>
              This method may be overriden by derived classes to provide custom validation logic. </remarks> 
            <seealso cref="M:FzFlexBox.MaskedBehavior.Symbol.Format(System.Char)"/>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.Symbol.Format(System.Char)">
            <summary>
              Formats the character entered by the user to a different character. </summary>
            <param name="c">
              The character entered by the user that will be formatted. </param>
            <returns>
              The reformatted character, as a string.  This allows derived classes more formatting flexibility if needed. </returns>
            <remarks>
              This method may be overriden by derived classes to provide custom formatting logic. 
              If no formatter method was associated with this object, the character is returned intact. </remarks> 
            <seealso cref="M:FzFlexBox.MaskedBehavior.Symbol.Validate(System.Char)"/>
        </member>
        <member name="M:FzFlexBox.MaskedBehavior.Symbol.op_Implicit(FzFlexBox.MaskedBehavior.Symbol)~System.Char">
            <summary>
              Allows converting/casting a Symbol object to its character representation. </summary>
            <example><code>
              MaskedBehavior.Symbol s = new MaskedBehavior.Symbol('#');
              char c = s; </code></example>
            <seealso cref="P:FzFlexBox.MaskedBehavior.Symbol.Char"/>
        </member>
        <member name="E:FzFlexBox.MaskedBehavior.Symbol.Validator">
            <summary>
              Event used to check if the character entered by the user corresponds 
              with this object's symbol. </summary>
            <seealso cref="T:FzFlexBox.MaskedBehavior.Symbol.ValidatorMethod"/>
            <seealso cref="M:FzFlexBox.MaskedBehavior.Symbol.Validate(System.Char)"/>
            <seealso cref="E:FzFlexBox.MaskedBehavior.Symbol.Formatter"/>
        </member>
        <member name="E:FzFlexBox.MaskedBehavior.Symbol.Formatter">
            <summary>
              Event used to format the character entered by the user to a different character, if needed. </summary>
            <seealso cref="T:FzFlexBox.MaskedBehavior.Symbol.FormatterMethod"/>
            <seealso cref="M:FzFlexBox.MaskedBehavior.Symbol.Format(System.Char)"/>
            <seealso cref="E:FzFlexBox.MaskedBehavior.Symbol.Validator"/>
        </member>
        <member name="P:FzFlexBox.MaskedBehavior.Symbol.Char">
            <summary>
              Gets or sets the character for this symbol. </summary>
        </member>
        <member name="T:FzFlexBox.MaskedBehavior.Symbol.ValidatorMethod">
            <summary>
              Definition for the method used to check if the character entered by the user corresponds 
              with this object's symbol. </summary>
            <seealso cref="E:FzFlexBox.MaskedBehavior.Symbol.Validator"/>
            <seealso cref="M:FzFlexBox.MaskedBehavior.Symbol.Validate(System.Char)"/>
            <seealso cref="T:FzFlexBox.MaskedBehavior.Symbol.FormatterMethod"/>
        </member>
        <member name="T:FzFlexBox.MaskedBehavior.Symbol.FormatterMethod">
            <summary>
              Definition for the method used to format the character entered by the user to a different character, if needed. </summary>
            <seealso cref="E:FzFlexBox.MaskedBehavior.Symbol.Formatter"/>
            <seealso cref="M:FzFlexBox.MaskedBehavior.Symbol.Format(System.Char)"/>
            <seealso cref="T:FzFlexBox.MaskedBehavior.Symbol.ValidatorMethod"/>
        </member>
        <member name="T:FzFlexBox.DateBehavior">
            <summary>
              Behavior class which handles input of date values in mm/dd/yyyy or dd/mm/yyyy format. </summary>
            <remarks>
              This behavior is designed to let the user enter a date value quickly and accurately.  
              As the user enters the digits, the slashes are automatically filled in. The user may only remove 
              characters from the right side of the value entered. This helps to keep the value properly formatted. 
              The user may also use the up/down arrow keys to increment/decrement the month, day, or year, depending on the location of the caret.  </remarks>
            <seealso cref="T:FzFlexBox.TimeBehavior"/>
            <seealso cref="T:FzFlexBox.DateTimeBehavior"/>
        </member>
        <member name="M:FzFlexBox.DateBehavior.#ctor(System.Windows.Forms.TextBoxBase)">
            <summary>
              Initializes a new instance of the DateBehavior class by associating it with a TextBoxBase derived object. </summary>
            <param name="textBox">
              The TextBoxBase object to associate with this behavior.  It must not be null. </param>
            <exception cref="T:System.ArgumentNullException">textBox is null. </exception>
            <remarks>
              This constructor determines the <see cref="P:FzFlexBox.DateBehavior.Separator"/> and date format (mm/dd/yyyy or dd/mm/yyyy) from the user's system. </remarks>
            <seealso cref="T:System.Windows.Forms.TextBoxBase"/>	
        </member>
        <member name="M:FzFlexBox.DateBehavior.#ctor(System.Windows.Forms.TextBoxBase,System.Boolean)">
            <summary>
              Initializes a new instance of the DateBehavior class by associating it with a TextBoxBase derived object. </summary>
            <param name="textBox">
              The TextBoxBase object to associate with this behavior.  It must not be null. </param>
            <param name="addEventHandlers">
              If true, the textBox's event handlers are tied to the corresponding methods on this behavior object. </param>
            <exception cref="T:System.ArgumentNullException">textBox is null. </exception>
            <remarks>
              This constructor determines the <see cref="P:FzFlexBox.DateBehavior.Separator"/> and date format (mm/dd/yyyy or dd/mm/yyyy) from the user's system. 
              It is meant to be used internally by the DateTime behavior class. </remarks>
            <seealso cref="T:System.Windows.Forms.TextBoxBase"/>	
        </member>
        <member name="M:FzFlexBox.DateBehavior.#ctor(FzFlexBox.DateBehavior)">
            <summary>
              Initializes a new instance of the DateBehavior class by copying it from 
              another DateBehavior object. </summary>
            <param name="behavior">
              The DateBehavior object to copied (and then disposed of).  It must not be null. </param>
            <exception cref="T:System.ArgumentNullException">behavior is null. </exception>
            <remarks>
              After the behavior.TextBox object is copied, Dispose is called on the behavior parameter. </remarks>
        </member>
        <member name="M:FzFlexBox.DateBehavior.HandleKeyEvent(System.Object,System.EventArgs)">
            <summary>
              Calls either the <see cref="M:FzFlexBox.DateBehavior.HandleKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)"/> or <see cref="M:FzFlexBox.DateBehavior.HandleKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)"/> method. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is designed to be called by the <see cref="T:FzFlexBox.DateTimeBehavior"/>
              class since it does not have public access to HandleKeyPress or HandleKeyDown.
              The type of EventArgs determines which method is called. </remarks>
            <seealso cref="E:System.Windows.Forms.Control.KeyDown"/>
        </member>
        <member name="M:FzFlexBox.DateBehavior.HandleKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
              Handles keyboard presses inside the textbox. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is overriden from the Behavior class and it  
              handles the textbox's KeyDown event. </remarks>
            <seealso cref="E:System.Windows.Forms.Control.KeyDown"/>
        </member>
        <member name="M:FzFlexBox.DateBehavior.HandleKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
              Handles keyboard presses inside the textbox. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is overriden from the Behavior class and it  
              handles the textbox's KeyPress event. </remarks>
            <seealso cref="E:System.Windows.Forms.Control.KeyPress"/>
        </member>
        <member name="M:FzFlexBox.DateBehavior.HandleLostFocus(System.Object,System.EventArgs)">
            <summary>
              Handles when the control has lost its focus. </summary>
        </member>
        <member name="M:FzFlexBox.DateBehavior.TwoDigits(System.Int32)">
            <summary>
              Converts an integer value to a 2-digit string (00 - 99). </summary>
            <param name="value">
              The number to convert. </param>
            <returns>
              The return value is the formatted string. </returns>
            <remarks>
              This is convenience method for formatting 2 digit
              values such as the month and day. </remarks>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMonthStartPosition">
            <summary>
              Retrieves the zero-based position of the month inside the texbox. </summary>
            <returns>
              The return value is the starting position of the month. </returns>
            <remarks>
              This is based on whether the month is shown before or after the day. </remarks>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetDayStartPosition">
            <summary>
              Retrieves the zero-based position of the day inside the texbox. </summary>
            <returns>
              The return value is the starting position of the day. </returns>
            <remarks>
              This is based on whether the day is shown before or after the month. </remarks>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetYearStartPosition">
            <summary>
              Retrieves the zero-based position of the year inside the texbox. </summary>
            <returns>
              The return value is the starting position of the year. </returns>
            <remarks>
              This is always 6. </remarks>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMaxMonth">
            <summary>
              Retrieves the maximum value for the month based on the year and the allowed range. </summary>
            <returns>
              The return value is the maximum value for the month. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMinMonth">
            <summary>
              Retrieves the minimum value for the month based on the year and the allowed range. </summary>
            <returns>
              The return value is the minimum value for the month. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMaxDay">
            <summary>
              Retrieves the maximum value for the day based on the month, year, and the allowed range. </summary>
            <returns>
              The return value is the maximum value for the day. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMinDay">
            <summary>
              Retrieves the minimum value for the day based on the month, year, and the allowed range. </summary>
            <returns>
              The return value is the minimum value for the day. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMaxDayOfMonth(System.Int32,System.Int32)">
            <summary>
              Retrieves the maximum day for a given month and year. </summary>
            <param name="month">
              The month (1 - 12). </param>
            <param name="year">
              The year (1900 - 9999). </param>
            <returns>
              The return value is the maximum day (1 - 31). </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMaxMonthDigit(System.Int32)">
            <summary>
              Retrieves the maximum digit that a month value can take, at one of its two character positions. </summary>
            <param name="position">
              The position of the digit of the month (0 or 1). </param>
            <returns>
              The return value is the maximum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMinMonthDigit(System.Int32)">
            <summary>
              Retrieves the minimum digit that a month value can take, at one of its two character positions. </summary>
            <param name="position">
              The position of the digit of the month (0 or 1). </param>
            <returns>
              The return value is the minimum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.IsValidMonthDigit(System.Char,System.Int32)">
            <summary>
              Checks if a digit is valid for the month at one of its two character positions. </summary>
            <param name="c">
              The digit to check. </param>
            <param name="position">
              The position of the digit of the month (0 or 1). </param>
            <returns>
              If the digit is valid for the month (at the given position), the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.IsValidMonth(System.Int32)">
            <summary>
              Checks if a month is valid -- falls within the allowed range. </summary>
            <param name="month">
              The month to check. </param>
            <returns>
              If the month falls within the allowed range, the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMaxDayDigit(System.Int32)">
            <summary>
              Retrieves the maximum digit that a day value can take, at one of its two character positions. </summary>
            <param name="position">
              The position of the digit of the day (0 or 1). </param>
            <returns>
              The return value is the maximum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMinDayDigit(System.Int32)">
            <summary>
              Retrieves the minimum digit that a day value can take, at one of its two character positions. </summary>
            <param name="position">
              The position of the digit of the day (0 or 1). </param>
            <returns>
              The return value is the minimum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.IsValidDayDigit(System.Char,System.Int32)">
            <summary>
              Checks if a digit is valid for the day at one of its two character positions. </summary>
            <param name="c">
              The digit to check. </param>
            <param name="position">
              The position of the digit of the day (0 or 1). </param>
            <returns>
              If the digit is valid for the day (at the given position), the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.IsValidDay(System.Int32)">
            <summary>
              Checks if a day is valid -- falls within the allowed range. </summary>
            <param name="day">
              The day to check. </param>
            <returns>
              If the day falls within the allowed range, the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.IsValidYear(System.Int32)">
            <summary>
              Checks if a year is valid -- falls within the allowed range. </summary>
            <param name="year">
              The year to check. </param>
            <returns>
              If the year falls within the allowed range, the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.AdjustMaxMonthAndDay">
            <summary>
              Adjusts the month (to the minimum) if not valid; otherwise adjusts the day (to the maximum) if not valid. </summary>
            <returns>
              If the month and/or day gets adjusted, the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.AdjustMaxDay">
            <summary>
              Adjusts the day (to the maximum) if not valid. </summary>
            <returns>
              If the day gets adjusted, the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMaxYearDigit(System.Int32)">
            <summary>
              Retrieves the maximum digit that a year value can take, at one of its four character positions. </summary>
            <param name="position">
              The position of the digit of the day (0 to 3). </param>
            <returns>
              The return value is the maximum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetMinYearDigit(System.Int32,System.Boolean)">
            <summary>
              Retrieves the minimum digit that a year value can take, at one of its four character positions. </summary>
            <param name="position">
              The position of the digit of the day (0 to 3). </param>
            <param name="validYear">
              If true, a valid year is used if the current one is not. </param>
            <returns>
              The return value is the minimum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.IsValidYearDigit(System.Char,System.Int32)">
            <summary>
              Checks if a digit is valid for the year at one of its four character positions. </summary>
            <param name="c">
              The digit to check. </param>
            <param name="position">
              The position of the digit of the day (0 to 3). </param>
            <returns>
              If the digit is valid for the year (at the given position), the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetValidMonth">
            <summary>
              Retrieves the month on the textbox as a valid value. </summary>
            <returns>
              The return value is the valid value for the month (1 - 12). </returns>
            <remarks>
              The method checks the value of the month on the textbox.  
              If it is within the allowed range, it returns it.  
              If it is less than the minimum allowed, the minimum is returned.
              If it is more than the maximum allowed, the maximum is returned. </remarks>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetValidDay">
            <summary>
              Retrieves the day on the textbox as a valid value. </summary>
            <returns>
              The return value is the valid value for the day (1 - 31). </returns>
            <remarks>
              The method checks the value of the day on the textbox.  
              If it is within the allowed range, it returns it.  
              If it is less than the minimum allowed, the minimum is returned.
              If it is more than the maximum allowed, the maximum is returned. </remarks>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetValidYear">
            <summary>
              Retrieves the year on the textbox as a valid value. </summary>
            <returns>
              The return value is the valid value for the year. </returns>
            <remarks>
              The method checks the value of the year on the textbox.  
              If it is within the allowed range, it returns it.  
              If it is less than the minimum allowed, the minimum is returned.
              If it is more than the maximum allowed, the maximum is returned. </remarks>
        </member>
        <member name="M:FzFlexBox.DateBehavior.SetDate(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the month, day, and year on the textbox. </summary>
            <param name="year">
              The year to set. </param>
            <param name="month">
              The month to set. </param>
            <param name="day">
              The day to set. </param>
            <remarks>
              This is a convenience method to set each value individually using a single method. 
              A <see cref="T:System.DateTime"/> object is constructed using these parameters, so they must be valid. </remarks>
        </member>
        <member name="M:FzFlexBox.DateBehavior.IsValid">
            <summary>
              Checks if the textbox's date is valid and falls within the allowed range. </summary>
            <returns>
              If the value is valid and falls within the allowed range, the return value is true; otherwise it is false. </returns>
            <seealso cref="P:FzFlexBox.DateBehavior.RangeMin"/>
            <seealso cref="P:FzFlexBox.DateBehavior.RangeMax"/>
        </member>
        <member name="M:FzFlexBox.DateBehavior.IsWithinRange(System.DateTime)">
            <summary>
              Checks if a date value falls within the allowed range. </summary>
            <param name="dt">
              The date value to check. </param>
            <returns>
              If the value is within the allowed range, the return value is true; otherwise it is false. </returns>
            <remarks>
              Only the date portion is checked; the time is ignored. </remarks>
            <seealso cref="P:FzFlexBox.DateBehavior.RangeMin"/>
            <seealso cref="P:FzFlexBox.DateBehavior.RangeMax"/>
            <seealso cref="M:FzFlexBox.DateBehavior.IsValid"/>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetValidText">
            <summary>
              Retrieves the textbox's text in valid form. </summary>
            <returns>
              If the textbox's text is valid, it is returned; otherwise a valid version of it is returned. </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetValidTextForDateTime">
            <summary>
              Retrieves the textbox's text in valid form. </summary>
            <returns>
              This is just an <c>internal</c> version of <see cref="M:FzFlexBox.DateBehavior.GetValidText"/> designed to be 
              accessed by the <see cref="T:FzFlexBox.DateTimeBehavior"/> class which needs it </returns>
        </member>
        <member name="M:FzFlexBox.DateBehavior.GetFormattedDate(System.Int32,System.Int32,System.Int32)">
            <summary>
              Formats a year, month, and day value into a string based on the proper format (mm/dd/yyyy or dd/mm/yyyy). </summary>
            <param name="year">
              The year value. </param>
            <param name="month">
              The month value. </param>
            <param name="day">
              The day value. </param>
            <returns>
              The return value is the formatted date value. </returns>
        </member>
        <member name="P:FzFlexBox.DateBehavior.Month">
            <summary>
              Gets or sets the month on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid month. </exception>
            <remarks>
              If the month is not valid on the textbox, this property will return 0.
              This property must be set with a month that falls within the allowed range. </remarks>
            <seealso cref="P:FzFlexBox.DateBehavior.Day"/>
            <seealso cref="P:FzFlexBox.DateBehavior.Year"/>
        </member>
        <member name="P:FzFlexBox.DateBehavior.Day">
            <summary>
              Gets or sets the day on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid day. </exception>
            <remarks>
              If the day is not valid on the textbox, this property will return 0.
              This property must be set with a day that falls within the allowed range. </remarks>
            <seealso cref="P:FzFlexBox.DateBehavior.Month"/>
            <seealso cref="P:FzFlexBox.DateBehavior.Year"/>
        </member>
        <member name="P:FzFlexBox.DateBehavior.Year">
            <summary>
              Gets or sets the year on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid year. </exception>
            <remarks>
              If the year is not valid on the textbox, this property will return 0.
              This property must be set with a year that falls within the allowed range. </remarks>
            <seealso cref="P:FzFlexBox.DateBehavior.Month"/>
            <seealso cref="P:FzFlexBox.DateBehavior.Day"/>
        </member>
        <member name="P:FzFlexBox.DateBehavior.Value">
            <summary>
              Gets or sets the month, day, and year on the textbox using a <see cref="T:System.DateTime"/> object. </summary>
            <remarks>
              This property gets and sets the <see cref="T:System.DateTime"/> boxed inside an <c>object</c>.
              This makes it flexible, so that if the textbox does not hold a valid date, a <c>null</c> is returned, 
              instead of having to worry about an exception being thrown. </remarks>
            <example><code>
              object obj = txtDate.Behavior.Value;
              
              if (obj != null)
              {
                DateTime dtm = (DateTime)obj;
                ...
              } </code></example>
            <seealso cref="P:FzFlexBox.DateBehavior.Month"/>
            <seealso cref="P:FzFlexBox.DateBehavior.Day"/>
            <seealso cref="P:FzFlexBox.DateBehavior.Year"/>
        </member>
        <member name="P:FzFlexBox.DateBehavior.ErrorMessage">
            <summary>
              Gets the error message used to notify the user to enter a valid date value 
              within the allowed range. </summary>
            <seealso cref="M:FzFlexBox.DateBehavior.IsValid"/>
        </member>
        <member name="P:FzFlexBox.DateBehavior.RangeMin">
            <summary>
              Gets or sets the minimum value allowed. </summary>
            <remarks>
              By default, this property is set to DateTime(1900, 1, 1).
              The range is actively checked as the user enters the date and 
              when the control loses focus if one of the <see cref="T:FzFlexBox.ValidatingFlag"/> flags is set. </remarks>	
            <seealso cref="P:FzFlexBox.DateBehavior.RangeMax"/>
        </member>
        <member name="P:FzFlexBox.DateBehavior.RangeMax">
            <summary>
              Gets or sets the maximum value allowed. </summary>
            <remarks>
              By default, this property is set to <see cref="F:System.DateTime.MaxValue"/>.
              The range is actively checked as the user enters the date and 
              when the control loses focus if one of the <see cref="T:FzFlexBox.ValidatingFlag"/> flags is set. </remarks>	
            <seealso cref="P:FzFlexBox.DateBehavior.RangeMin"/>
        </member>
        <member name="P:FzFlexBox.DateBehavior.Separator">
            <summary>
              Gets or sets the character used to separate the month, day, and year values of the date. </summary>
            <remarks>
              By default, this property is set according to the user's system. 
              If this property is changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </remarks>
        </member>
        <member name="P:FzFlexBox.DateBehavior.ShowDayBeforeMonth">
            <summary>
              Gets or sets whether the day should be shown before the month or after it. </summary>
            <remarks>
              By default, this property is set according to the user's system. 
              If this property is changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </remarks>
            <seealso cref="F:FzFlexBox.DateBehavior.Flag.DayBeforeMonth"/>
        </member>
        <member name="T:FzFlexBox.DateBehavior.Flag">
            <summary>
              Internal values that are added/removed to the <see cref="P:FzFlexBox.Behavior.Flags"/> property by other
              properties of this class. </summary>
        </member>
        <member name="F:FzFlexBox.DateBehavior.Flag.DayBeforeMonth">
            <summary> The day is displayed in front of the month. </summary>
            <seealso cref="P:FzFlexBox.DateBehavior.ShowDayBeforeMonth"/>
        </member>
        <member name="T:FzFlexBox.TimeBehavior">
            <summary>
              Behavior class which handles input of time values. </summary>
            <remarks>
              This behavior supports time values in 12 or 24 hour format, with or without seconds. 
              It is designed to let the user enter a time value quickly and accurately.  
              As the user enters the digits, the colons are automatically filled in. The user may only remove 
              characters from the right side of the value entered. This helps to keep the value properly formatted. 
              The user may also use the up/down arrow keys to increment/decrement the hour, minute, second, or AM/PM, 
              depending on the location of the caret.  </remarks>
            <seealso cref="T:FzFlexBox.DateBehavior"/>
            <seealso cref="T:FzFlexBox.DateTimeBehavior"/>
        </member>
        <member name="F:FzFlexBox.TimeBehavior.m_hourStart">
            <summary>
              The starting zero-based position of the hour on the texbox. </summary>
            <remarks>
              This is 0 by default, however it may be changed to allow 
              another value to be placed in front of the time, such as a date. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.#ctor(System.Windows.Forms.TextBoxBase)">
            <summary>
              Initializes a new instance of the TimeBehavior class by associating it with a TextBoxBase derived object. </summary>
            <param name="textBox">
              The TextBoxBase object to associate with this behavior.  It must not be null. </param>
            <exception cref="T:System.ArgumentNullException">textBox is null. </exception>
            <remarks>
              This constructor determines the <see cref="P:FzFlexBox.TimeBehavior.Separator"/> and time format from the user's system. </remarks>
            <seealso cref="T:System.Windows.Forms.TextBoxBase"/>	
        </member>
        <member name="M:FzFlexBox.TimeBehavior.#ctor(FzFlexBox.TimeBehavior)">
            <summary>
              Initializes a new instance of the TimeBehavior class by copying it from 
              another TimeBehavior object. </summary>
            <param name="behavior">
              The TimeBehavior object to copied (and then disposed of).  It must not be null. </param>
            <exception cref="T:System.ArgumentNullException">behavior is null. </exception>
            <remarks>
              After the behavior.TextBox object is copied, Dispose is called on the behavior parameter. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.HandleKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
              Handles keyboard presses inside the textbox. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is overriden from the Behavior class and it  
              handles the textbox's KeyDown event. </remarks>
            <seealso cref="E:System.Windows.Forms.Control.KeyDown"/>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.HandleKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
              Handles keyboard presses inside the textbox. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is overriden from the Behavior class and it  
              handles the textbox's KeyPress event. </remarks>
            <seealso cref="E:System.Windows.Forms.Control.KeyPress"/>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.TwoDigits(System.Int32)">
            <summary>
              Converts an integer value to a 2-digit string (00 - 99). </summary>
            <param name="value">
              The number to convert. </param>
            <returns>
              The return value is the formatted string. </returns>
            <remarks>
              This is convenience method for formatting 2 digit
              values such as the hour and minute. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetHourStartPosition">
            <summary>
              Retrieves the zero-based position of the hour inside the texbox. </summary>
            <returns>
              The return value is the starting position of the hour. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMinuteStartPosition">
            <summary>
              Retrieves the zero-based position of the minute inside the texbox. </summary>
            <returns>
              The return value is the starting position of the minute. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetSecondStartPosition">
            <summary>
              Retrieves the zero-based position of the second inside the texbox. </summary>
            <returns>
              The return value is the starting position of the second. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetAMPMStartPosition">
            <summary>
              Retrieves the zero-based position of the AM/PM inside the texbox. </summary>
            <returns>
              The return value is the starting position of the AM/PM. </returns>
            <remarks>
              This is based on whether the seconds are being shown or not. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMaxHour(System.Boolean)">
            <summary>
              Retrieves the maximum value for the hour. </summary>
            <param name="force24HourFormat">
              If true, the maximum is 23, regardless of the <see cref="P:FzFlexBox.TimeBehavior.Show24HourFormat"/> property; 
              otherwise it is based on the <see cref="P:FzFlexBox.TimeBehavior.Show24HourFormat"/> property. </param>
            <returns>
              The return value is the maximum value for the hour (23 or 12). </returns>
            <remarks>
              Note: This value is not based on <see cref="P:FzFlexBox.TimeBehavior.RangeMax"/>. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMinHour(System.Boolean)">
            <summary>
              Retrieves the minimum value for the hour. </summary>
            <param name="force24HourFormat">
              If true, the minimum is 0, regardless of the <see cref="P:FzFlexBox.TimeBehavior.Show24HourFormat"/> property; 
              otherwise it is based on the <see cref="P:FzFlexBox.TimeBehavior.Show24HourFormat"/> property. </param>
            <returns>
              The return value is the minimum value for the hour (0 or 1). </returns>
            <remarks>
              Note: This value is not based on <see cref="P:FzFlexBox.TimeBehavior.RangeMin"/>. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMaxMinute">
            <summary>
              Retrieves the maximum value for the minute: 59. </summary>
            <returns>
              The return value is always 59. </returns>
            <remarks>
              Note: This value is not based on <see cref="P:FzFlexBox.TimeBehavior.RangeMax"/>. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMinMinute">
            <summary>
              Retrieves the minimum value for the minute: 0. </summary>
            <returns>
              The return value is always 0. </returns>
            <remarks>
              Note: This value is not based on <see cref="P:FzFlexBox.TimeBehavior.RangeMin"/>. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMaxSecond">
            <summary>
              Retrieves the maximum value for the second: 59. </summary>
            <returns>
              The return value is always 59. </returns>
            <remarks>
              Note: This value is not based on <see cref="P:FzFlexBox.TimeBehavior.RangeMax"/>. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMinSecond">
            <summary>
              Retrieves the minimum value for the second: 0. </summary>
            <returns>
              The return value is always 0. </returns>
            <remarks>
              Note: This value is not based on <see cref="P:FzFlexBox.TimeBehavior.RangeMin"/>. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMaxHourDigit(System.Int32)">
            <summary>
              Retrieves the maximum digit that an hour value can take, at one of its two character positions. </summary>
            <param name="position">
              The position of the digit of the hour (0 or 1). </param>
            <returns>
              The return value is the maximum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMinHourDigit(System.Int32)">
            <summary>
              Retrieves the minimum digit that an hour value can take, at one of its two character positions. </summary>
            <param name="position">
              The position of the digit of the hour (0 or 1). </param>
            <returns>
              The return value is the minimum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.IsValidHourDigit(System.Char,System.Int32)">
            <summary>
              Checks if a digit is valid for the hour at one of its two character positions. </summary>
            <param name="c">
              The digit to check. </param>
            <param name="position">
              The position of the digit of the hour (0 or 1). </param>
            <returns>
              If the digit is valid for the hour (at the given position), the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.IsValidHour(System.Int32,System.Boolean)">
            <summary>
              Checks if a value represents a valid hour. </summary>
            <param name="hour">
              The value to check. </param>
            <param name="force24HourFormat">
              If true, the range is based on a 24-hour format, regardless of the <see cref="P:FzFlexBox.TimeBehavior.Show24HourFormat"/> property; 
              otherwise it is based on the <see cref="P:FzFlexBox.TimeBehavior.Show24HourFormat"/> property. </param>
            <returns>
              If the value is a valid hour, the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMaxMinuteDigit(System.Int32)">
            <summary>
              Retrieves the maximum digit that a minute value can take, at one of its two character positions. </summary>
            <param name="position">
              The position of the digit of the minute (0 or 1). </param>
            <returns>
              The return value is the maximum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMinMinuteDigit(System.Int32)">
            <summary>
              Retrieves the minimum digit that a minute value can take, at one of its two character positions. </summary>
            <param name="position">
              The position of the digit of the minute (0 or 1). </param>
            <returns>
              The return value is the minimum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.IsValidMinuteDigit(System.Char,System.Int32)">
            <summary>
              Checks if a digit is valid for the minute at one of its two character positions. </summary>
            <param name="c">
              The digit to check. </param>
            <param name="position">
              The position of the digit of the minute (0 or 1). </param>
            <returns>
              If the digit is valid for the minute (at the given position), the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.IsValidMinute(System.Int32)">
            <summary>
              Checks if a value represents a valid minute. </summary>
            <param name="minute">
              The value to check. </param>
            <returns>
              If the value is a valid minute, the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMaxSecondDigit(System.Int32)">
            <summary>
              Retrieves the maximum digit that a "second" value can take, at one of its two character positions. </summary>
            <param name="position">
              The position of the digit of the second (0 or 1). </param>
            <returns>
              The return value is the maximum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetMinSecondDigit(System.Int32)">
            <summary>
              Retrieves the minimum digit that a "second" value can take, at one of its two character positions. </summary>
            <param name="position">
              The position of the digit of the second (0 or 1). </param>
            <returns>
              The return value is the minimum digit that it can be. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.IsValidSecondDigit(System.Char,System.Int32)">
            <summary>
              Checks if a digit is valid for the "second" at one of its two character positions. </summary>
            <param name="c">
              The digit to check. </param>
            <param name="position">
              The position of the digit of the second (0 or 1). </param>
            <returns>
              If the digit is valid for the second (at the given position), the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.IsValidSecond(System.Int32)">
            <summary>
              Checks if a value represents a valid second. </summary>
            <param name="second">
              The value to check. </param>
            <returns>
              If the value is a valid second, the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.ShowAMPM">
            <summary>
              Shows the AM symbol if not in 24-hour format and it's not already shown. </summary>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.SetAMPM(System.Boolean)">
            <summary>
              Sets the AM or PM symbol if not in 24-hour format. </summary>
            <param name="am">
              If true, sets the AM symbol; otherwise it sets the PM symbol. </param>
            <seealso cref="P:FzFlexBox.TimeBehavior.AMPM"/>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.ChangeAMPM(System.Char)">
            <summary>
              Changes the AM/PM symbol based on a character entered by the user. </summary>
            <param name="c">
              The character entered by the user, such as 'a' or 'p'. </param>
            <returns>
              If the AM/PM symbol is changed, the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetAMPMPosition(System.String)">
            <summary>
              Retrieves the zero-based position of the AM/PM symbol on a given text. </summary>
            <param name="text">
              The text to parse and find the position of the AM/PM symbol. </param>
            <returns>
              The return value is the zero-based position of the AM/PM symbol. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.IsValidAMPM(System.String)">
            <summary>
              Checks if a string is a valid AM or PM symbol. </summary>
            <param name="ampm">
              The value to check. </param>
            <returns>
              If the value is a valid AM or PM symbol, the return value is true; otherwise it is false. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetValidHour(System.Boolean)">
            <summary>
              Retrieves the hour on the textbox as a valid value. </summary>
            <param name="force24HourFormat">
              If true, the value is validated based on a 24-hour format, regardless of the <see cref="P:FzFlexBox.TimeBehavior.Show24HourFormat"/> property; 
              otherwise it is based on the <see cref="P:FzFlexBox.TimeBehavior.Show24HourFormat"/> property. </param>
            <returns>
              The return value is the valid value for the hour. </returns>
            <remarks>
              The method checks the value of the hour on the textbox.  
              If it is a valid hour, it returns it.  
              If it is less than it should be, the minimum is returned.
              If it is more than it should be, the maximum is returned. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetValidMinute">
            <summary>
              Retrieves the minute on the textbox as a valid value. </summary>
            <returns>
              The return value is the valid value for the minute. </returns>
            <remarks>
              The method checks the value of the minute on the textbox.  
              If it is a valid minute, it returns it.  
              If it is less than it should be, the minimum is returned.
              If it is more than it should be, the maximum is returned. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetValidSecond">
            <summary>
              Retrieves the second on the textbox as a valid value. </summary>
            <returns>
              The return value is the valid value for the second. </returns>
            <remarks>
              The method checks the value of the second on the textbox.  
              If it is a valid second, it returns it.  
              If it is less than it should be, the minimum is returned.
              If it is more than it should be, the maximum is returned. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetValidAMPM">
            <summary>
              Retrieves the AM/PM symbol on the textbox as a valid value. </summary>
            <returns>
              The return value is the valid value for the AM/PM symbol. </returns>
            <remarks>
              The method checks the value of the AM/PM symbol on the textbox.  
              If it is a valid AM/PM symbol, it returns it; otherwise it returns the AM symbol. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.ConvertTo24Hour(System.Int32,System.String)">
            <summary>
              Converts an hour in 12-hour format and its AM/PM symbol to its 
              24-hour equivalent. </summary>
            <param name="hour">
              The hour value to convert, in 12-hour format (1 to 12). </param>
            <param name="ampm">
              The AM/PM symbol which denotes if the hour is between 0 and 11, or 12 and 23. </param>
            <returns>
              The return value is the hour converted to 24-hour format (0 to 23). </returns>
            <seealso cref="M:FzFlexBox.TimeBehavior.ConvertToAMPMHour(System.Int32,System.String@)"/>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.ConvertToAMPMHour(System.Int32,System.String@)">
            <summary>
              Converts an hour in 24-hour format to its 12-hour equivalent. </summary>
            <param name="hour">
              The hour value to convert, in 24-hour format (0 to 23). </param>
            <param name="ampm">
              The returned AM/PM symbol, used to denote if the hour was between 0 and 11, or 12 and 23. </param>
            <returns>
              The return value is the hour converted to 12-hour format (1 to 12). </returns>
            <seealso cref="M:FzFlexBox.TimeBehavior.ConvertTo24Hour(System.Int32,System.String)"/>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.SetTime(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the hour, minute, and second on the textbox. </summary>
            <param name="hour">
              The hour to set, between 0 and 23. </param>
            <param name="minute">
              The minute to set, between 0 and 59. </param>
            <param name="second">
              The second to set, between 0 and 59. </param>
            <remarks>
              This is a convenience method to set each value individually using a single method. 
              A <see cref="T:System.DateTime"/> object is constructed using these parameters, so they must be valid. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.SetTime(System.Int32,System.Int32)">
            <summary>
              Sets the hour and minute on the textbox. </summary>
            <param name="hour">
              The hour to set, between 0 and 23. </param>
            <param name="minute">
              The minute to set, between 0 and 59. </param>
            <remarks>
              This is a convenience method to set each value individually using a single method. 
              A <see cref="T:System.DateTime"/> object is constructed using these parameters, so they must be valid. 
              If the second is being shown on the textbox, it is set to 0.  </remarks>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.IsValid">
            <summary>
              Checks if the textbox's time is valid and falls within the allowed range. </summary>
            <returns>
              If the value is valid and falls within the allowed range, the return value is true; otherwise it is false. </returns>
            <seealso cref="P:FzFlexBox.TimeBehavior.RangeMin"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.RangeMax"/>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.IsValid(System.Boolean)">
            <summary>
              Checks if the textbox's time is valid and optionally if it falls within the allowed range. </summary>
            <param name="checkRangeAlso">
              If true, the time is also checked that it falls within allowed range. </param>
            <returns>
              If the value is valid, the return value is true; otherwise it is false. </returns>
            <seealso cref="P:FzFlexBox.TimeBehavior.RangeMin"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.RangeMax"/>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.IsWithinRange(System.DateTime)">
            <summary>
              Checks if a time value falls within the allowed range. </summary>
            <param name="dt">
              The time value to check. </param>
            <returns>
              If the value is within the allowed range, the return value is true; otherwise it is false. </returns>
            <remarks>
              Only the time portion is checked; the date is ignored. </remarks>
            <seealso cref="P:FzFlexBox.TimeBehavior.RangeMin"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.RangeMax"/>
            <seealso cref="M:FzFlexBox.TimeBehavior.IsValid"/>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.SetAMPMSymbols(System.String,System.String)">
            <summary>
              Sets the symbols to use for AM and PM. </summary>
            <param name="am">
              The symbol to use for AM. </param>
            <param name="pm">
              The symbol to use for PM. </param>
            <exception cref="T:System.ArgumentException">The lengths of the parameters are not the same. </exception>
            <remarks>
              By default, the symbols are set according to the user's system. 
              This method allows them to be changed, however, they must both be identical in length.
              If the symbols are changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </remarks>
            <seealso cref="M:FzFlexBox.TimeBehavior.GetAMPMSymbols(System.String@,System.String@)"/>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetAMPMSymbols(System.String@,System.String@)">
            <summary>
              Gets the symbols used for AM and PM. </summary>
            <param name="am">
              The symbol used for AM. </param>
            <param name="pm">
              The symbol used for PM. </param>
            <seealso cref="M:FzFlexBox.TimeBehavior.SetAMPMSymbols(System.String,System.String)"/>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetValidText">
            <summary>
              Retrieves the textbox's text in valid form. </summary>
            <returns>
              If the textbox's text is valid, it is returned; otherwise a valid version of it is returned. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.GetFormattedTime(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              Formats an hour, minute, second, and AM/PM value into a string based on the proper format. </summary>
            <param name="hour">
              The hour value. </param>
            <param name="minute">
              The minute value. </param>
            <param name="second">
              The second value. </param>
            <param name="ampm">
              The AM/PM value, which may be empty if the hour is in 24-hour format. </param>
            <returns>
              The return value is the formatted time value. </returns>
        </member>
        <member name="M:FzFlexBox.TimeBehavior.AdjustWithinRange">
            <summary>
              Adjusts the textbox's value to be within the range of allowed values. </summary>
        </member>
        <member name="P:FzFlexBox.TimeBehavior.Hour">
            <summary>
              Gets or sets the hour on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid hour. </exception>
            <remarks>
              If the hour is not valid on the textbox, this property will return -1.
              This property must be set with a valid hour -- between 0 and 23. </remarks>
            <seealso cref="P:FzFlexBox.TimeBehavior.Minute"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.Second"/>
        </member>
        <member name="P:FzFlexBox.TimeBehavior.Minute">
            <summary>
              Gets or sets the minute on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid minute. </exception>
            <remarks>
              If the minute is not valid on the textbox, this property will return -1.
              This property must be set with a valid minute -- between 0 and 59. </remarks>
            <seealso cref="P:FzFlexBox.TimeBehavior.Hour"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.Second"/>
        </member>
        <member name="P:FzFlexBox.TimeBehavior.Second">
            <summary>
              Gets or sets the second on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid second. </exception>
            <remarks>
              If the second is not valid on the textbox, this property will return -1.
              This property must be set with a valid second -- between 0 and 59. </remarks>
            <seealso cref="P:FzFlexBox.TimeBehavior.Hour"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.Minute"/>
        </member>
        <member name="P:FzFlexBox.TimeBehavior.AMPM">
            <summary>
              Gets AM/PM symbol on the textbox. </summary>
            <remarks>
              If the AM/PM symbol is not valid or is not being shown on the textbox, this property will return an empty string. </remarks>
            <seealso cref="P:FzFlexBox.TimeBehavior.Hour"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.Minute"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.Second"/>
        </member>
        <member name="P:FzFlexBox.TimeBehavior.Value">
            <summary>
              Gets or sets the hour, minute, and second on the textbox using a <see cref="T:System.DateTime"/> object. </summary>
            <remarks>
              This property gets and sets the <see cref="T:System.DateTime"/> boxed inside an <c>object</c>.
              This makes it flexible, so that if the textbox does not hold a valid time, a <c>null</c> is returned, 
              instead of having to worry about an exception being thrown. </remarks>
            <example><code>
              object obj = txtTime.Behavior.Value;
              if (obj != null)
              {
                DateTime dtm = (DateTime)obj;
                ...
              } </code></example>
            <seealso cref="P:FzFlexBox.TimeBehavior.Hour"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.Minute"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.Second"/>
        </member>
        <member name="P:FzFlexBox.TimeBehavior.ErrorMessage">
            <summary>
              Gets the error message used to notify the user to enter a valid time value 
              within the allowed range. </summary>
            <seealso cref="M:FzFlexBox.TimeBehavior.IsValid"/>
        </member>
        <member name="P:FzFlexBox.TimeBehavior.RangeMin">
            <summary>
              Gets or sets the minimum value allowed. </summary>
            <remarks>
              By default, this property is set to DateTime(1900, 1, 1, 0, 0, 0),
              however the range is only checked when the control loses focus if one of the <see cref="T:FzFlexBox.ValidatingFlag"/> flags is set. </remarks>	
            <seealso cref="P:FzFlexBox.TimeBehavior.RangeMax"/>
        </member>
        <member name="P:FzFlexBox.TimeBehavior.RangeMax">
            <summary>
              Gets or sets the maximum value allowed. </summary>
            <remarks>
              By default, this property is set to DateTime(1900, 1, 1, 23, 59, 59),
              however the range is only checked when the control loses focus if one of the <see cref="T:FzFlexBox.ValidatingFlag"/> flags is set. </remarks>	
            <seealso cref="P:FzFlexBox.TimeBehavior.RangeMin"/>
        </member>
        <member name="P:FzFlexBox.TimeBehavior.Separator">
            <summary>
              Gets or sets the character used to separate the hour, minute, and second values of the time. </summary>
            <remarks>
              By default, this property is set according to the user's system. 
              If this property is changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </remarks>
        </member>
        <member name="P:FzFlexBox.TimeBehavior.Show24HourFormat">
            <summary>
              Gets or sets whether the hour should be shown in 24-hour format. </summary>
            <remarks>
              By default, this property is set according to the user's system. 
              If the format is set to 12-hour format the AM/PM symbols are also shown; otherwise they are are not shown.
              If this property is changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </remarks>
            <seealso cref="F:FzFlexBox.TimeBehavior.Flag.TwentyFourHourFormat"/>
        </member>
        <member name="P:FzFlexBox.TimeBehavior.ShowSeconds">
            <summary>
              Gets or sets whether the seconds should be shown (after the minutes). </summary>
            <remarks>
              By default, this property is set to false, so that the seconds are not shown. 
              If this property is changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </remarks>
            <seealso cref="F:FzFlexBox.TimeBehavior.Flag.WithSeconds"/>
        </member>
        <member name="T:FzFlexBox.TimeBehavior.Flag">
            <summary>
              Internal values that are added/removed to the <see cref="P:FzFlexBox.Behavior.Flags"/> property by other
              properties of this class. </summary>
        </member>
        <member name="F:FzFlexBox.TimeBehavior.Flag.TwentyFourHourFormat">
            <summary> The hour is shown in 24-hour format (00 to 23). </summary>
            <seealso cref="P:FzFlexBox.TimeBehavior.Show24HourFormat"/>
        </member>
        <member name="F:FzFlexBox.TimeBehavior.Flag.WithSeconds">
            <summary> The seconds are also shown. </summary>
            <seealso cref="P:FzFlexBox.TimeBehavior.ShowSeconds"/>
        </member>
        <member name="T:FzFlexBox.DateTimeBehavior">
            <summary>
              Behavior class which handles input of date and time values. </summary>
            <remarks>
              This behavior is designed to let the user enter a date and time value quickly and accurately.  
              As the user enters the digits, the separators are automatically filled in. The user may only remove 
              characters from the right side of the value entered. This helps to keep the value properly formatted. 
              The user may also use the up/down arrow keys to increment/decrement the month, day, year, hour, minute, or second
              depending on the location of the caret.  </remarks>
            <seealso cref="T:FzFlexBox.DateBehavior"/>
            <seealso cref="T:FzFlexBox.TimeBehavior"/>
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.#ctor(System.Windows.Forms.TextBoxBase)">
            <summary>
              Initializes a new instance of the DateTimeBehavior class by associating it with a TextBoxBase derived object. </summary>
            <param name="textBox">
              The TextBoxBase object to associate with this behavior.  It must not be null. </param>
            <exception cref="T:System.ArgumentNullException">textBox is null. </exception>
            <remarks>
              This constructor retrieves many of the properties from the user's system. </remarks>
            <seealso cref="T:System.Windows.Forms.TextBoxBase"/>	
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.#ctor(FzFlexBox.DateTimeBehavior)">
            <summary>
              Initializes a new instance of the DateTimeBehavior class by copying it from 
              another DateTimeBehavior object. </summary>
            <param name="behavior">
              The DateTimeBehavior object to copied (and then disposed of).  It must not be null. </param>
            <exception cref="T:System.ArgumentNullException">behavior is null. </exception>
            <remarks>
              After the behavior.TextBox object is copied, Dispose is called on the behavior parameter. </remarks>
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.SetDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the month, day, year, hour, minute, and second on the textbox. </summary>
            <param name="year">
              The year to set. </param>
            <param name="month">
              The month to set. </param>
            <param name="day">
              The day to set. </param>
            <param name="hour">
              The hour to set, between 0 and 23. </param>
            <param name="minute">
              The minute to set, between 0 and 59. </param>
            <remarks>
              This is a convenience method to set each value individually using a single method. 
              A <see cref="T:System.DateTime"/> object is constructed using these parameters, so they must be valid. 
              If the second is being shown on the textbox, it is set to 0.  </remarks>
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.SetDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the month, day, year, hour, minute, and second on the textbox. </summary>
            <param name="year">
              The year to set. </param>
            <param name="month">
              The month to set. </param>
            <param name="day">
              The day to set. </param>
            <param name="hour">
              The hour to set, between 0 and 23. </param>
            <param name="minute">
              The minute to set, between 0 and 59. </param>
            <param name="second">
              The second to set, between 0 and 59. </param>
            <remarks>
              This is a convenience method to set each value individually using a single method. 
              A <see cref="T:System.DateTime"/> object is constructed using these parameters, so they must be valid. </remarks>
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.SetDate(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the month, day, and year on the textbox. </summary>
            <param name="year">
              The year to set. </param>
            <param name="month">
              The month to set. </param>
            <param name="day">
              The day to set. </param>
            <remarks>
              This is a convenience method to set each value individually using a single method. 
              A <see cref="T:System.DateTime"/> object is constructed using these parameters, so they must be valid. </remarks>
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.SetTime(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the hour, minute, and second on the textbox. </summary>
            <param name="hour">
              The hour to set, between 0 and 23. </param>
            <param name="minute">
              The minute to set, between 0 and 59. </param>
            <param name="second">
              The second to set, between 0 and 59. </param>
            <remarks>
              This is a convenience method to set each value individually using a single method. 
              A <see cref="T:System.DateTime"/> object is constructed using these parameters, so they must be valid. </remarks>
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.SetTime(System.Int32,System.Int32)">
            <summary>
              Sets the hour and minute on the textbox. </summary>
            <param name="hour">
              The hour to set, between 0 and 23. </param>
            <param name="minute">
              The minute to set, between 0 and 59. </param>
            <remarks>
              This is a convenience method to set each value individually using a single method. 
              A <see cref="T:System.DateTime"/> object is constructed using these parameters, so they must be valid. 
              If the second is being shown on the textbox, it is set to 0.  </remarks>
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.IsValid">
            <summary>
              Checks if the textbox's date and/or time is valid and falls within the allowed range. </summary>
            <returns>
              If the value is valid and falls within the allowed range, the return value is true; otherwise it is false. </returns>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.RangeMin"/>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.RangeMax"/>
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.IsWithinRange(System.DateTime)">
            <summary>
              Checks if a date and time value falls within the allowed range. </summary>
            <param name="dt">
              The date and time value to check. </param>
            <returns>
              If the value is within the allowed range, the return value is true; otherwise it is false. </returns>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.RangeMin"/>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.RangeMax"/>
            <seealso cref="M:FzFlexBox.DateTimeBehavior.IsValid"/>
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.GetValidText">
            <summary>
              Retrieves the textbox's text in valid form. </summary>
            <returns>
              If the textbox's text is valid, it is returned; otherwise a valid version of it is returned. </returns>
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.HandleKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
              Handles keyboard presses inside the textbox. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is overriden from the Behavior class and it  
              handles the textbox's KeyDown event. </remarks>
            <seealso cref="E:System.Windows.Forms.Control.KeyDown"/>
        </member>
        <member name="M:FzFlexBox.DateTimeBehavior.HandleKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
              Handles keyboard presses inside the textbox. </summary>
            <param name="sender">
              The object who sent the event. </param>
            <param name="e">
              The event data. </param>
            <remarks>
              This method is overriden from the Behavior class and it  
              handles the textbox's KeyPress event. </remarks>
            <seealso cref="E:System.Windows.Forms.Control.KeyPress"/>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.Value">
            <summary>
              Gets or sets the month, day, year, hour, minute, and second on the textbox using a <see cref="T:System.DateTime"/> object. </summary>
            <remarks>
              This property gets and sets the <see cref="T:System.DateTime"/> boxed inside an <c>object</c>.
              This makes it flexible, so that if the textbox does not hold a valid date and time, a <c>null</c> is returned, 
              instead of having to worry about an exception being thrown. </remarks>
            <example><code>
              object obj = txtDateTime.Behavior.Value;
              if (obj != null)
              {
                DateTime dtm = (DateTime)obj;
                ...
              } </code></example>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.Month"/>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.Day"/>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.Year"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.Hour"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.Minute"/>
            <seealso cref="P:FzFlexBox.TimeBehavior.Second"/>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.Month">
            <summary>
              Gets or sets the month on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid month. </exception>
            <remarks>
              If the month is not being shown or is not valid on the textbox, this property will return 0.
              This property must be set with a month that falls within the allowed range. </remarks>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.Day"/>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.Year"/>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.Day">
            <summary>
              Gets or sets the day on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid day. </exception>
            <remarks>
              If the day is not being shown or is not valid on the textbox, this property will return 0.
              This property must be set with a day that falls within the allowed range. </remarks>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.Month"/>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.Year"/>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.Year">
            <summary>
              Gets or sets the year on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid year. </exception>
            <remarks>
              If the year is not being shown or is not valid on the textbox, this property will return 0.
              This property must be set with a year that falls within the allowed range. </remarks>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.Month"/>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.Day"/>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.RangeMin">
            <summary>
              Gets or sets the minimum value allowed. </summary>
            <remarks>
              By default, this property is set to DateTime(1900, 1, 1, 0, 0, 0).
              The range is actively checked as the user enters the date but the time is only checked 
              when the control loses focus, if one of the <see cref="T:FzFlexBox.ValidatingFlag"/> flags is set. </remarks>	
            <seealso cref="P:FzFlexBox.DateTimeBehavior.RangeMax"/>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.RangeMax">
            <summary>
              Gets or sets the maximum value allowed. </summary>
            <remarks>
              By default, this property is set to <see cref="F:System.DateTime.MaxValue"/>.
              The range is actively checked as the user enters the date but the time is only checked 
              when the control loses focus, if one of the <see cref="T:FzFlexBox.ValidatingFlag"/> flags is set. </remarks>	
            <seealso cref="P:FzFlexBox.DateTimeBehavior.RangeMin"/>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.DateSeparator">
            <summary>
              Gets or sets the character used to separate the month, day, and year values of the date. </summary>
            <remarks>
              By default, this property is set according to the user's system. 
              If this property is changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </remarks>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.TimeSeparator">
            <summary>
              Gets or sets the character used to separate the hour, minute, and second values of the time. </summary>
            <remarks>
              By default, this property is set according to the user's system. 
              If this property is changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </remarks>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.Separator">
            <summary>
              Gets the character used to separate the date or time value. </summary>
            <remarks>
              If only the date is being shown, this property retrieves the <see cref="P:FzFlexBox.DateTimeBehavior.DateSeparator"/>.
              If only the time is being shown, this property retrieves the <see cref="P:FzFlexBox.DateTimeBehavior.TimeSeparator"/>.
              If both the date and time are being shown, this property retrieves a space character. </remarks>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.ShowDayBeforeMonth">
            <summary>
              Gets or sets whether the day should be shown before the month or after it. </summary>
            <remarks>
              By default, this property is set according to the user's system. 
              If this property is changed, <see cref="M:FzFlexBox.Behavior.UpdateText"/> is automatically called. </remarks>
            <seealso cref="F:FzFlexBox.DateTimeBehavior.Flag.DayBeforeMonth"/>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.Flags">
            <summary>
              Gets or sets the flags associated with this object. </summary>
            <remarks>
              This property behaves like the one in the <see cref="P:FzFlexBox.Behavior.Flags">base class</see> 
              but is overriden to properly set the start position of the hour, in case the 
              <see cref="F:FzFlexBox.DateTimeBehavior.Flag.DateOnly"/> or <see cref="F:FzFlexBox.DateTimeBehavior.Flag.TimeOnly"/> flags are turned on/off. </remarks>
            <seealso cref="M:FzFlexBox.Behavior.ModifyFlags(System.Int32,System.Boolean)"/>
        </member>
        <member name="P:FzFlexBox.DateTimeBehavior.ErrorMessage">
            <summary>
              Gets the error message used to notify the user to enter a valid date and time value 
              within the allowed range. </summary>
            <seealso cref="M:FzFlexBox.DateTimeBehavior.IsValid"/>
        </member>
        <member name="T:FzFlexBox.DateTimeBehavior.Flag">
            <summary>
              Internal values that are added/removed to the <see cref="P:FzFlexBox.Behavior.Flags"/> property by other
              properties of this class. </summary>
        </member>
        <member name="F:FzFlexBox.DateTimeBehavior.Flag.DateOnly">
            <summary> Makes this object behave like the Date behavior, where only the date part is shown. </summary>
            <seealso cref="T:FzFlexBox.DateBehavior"/>
        </member>
        <member name="F:FzFlexBox.DateTimeBehavior.Flag.TimeOnly">
            <summary> Makes this object behave like the Time behavior, where only the time part is shown. </summary>
            <seealso cref="T:FzFlexBox.TimeBehavior"/>
        </member>
        <member name="F:FzFlexBox.DateTimeBehavior.Flag.DayBeforeMonth">
            <summary> The day is displayed in front of the month. </summary>
            <seealso cref="P:FzFlexBox.DateTimeBehavior.ShowDayBeforeMonth"/>
        </member>
        <member name="F:FzFlexBox.DateTimeBehavior.Flag.TwentyFourHourFormat">
            <summary> The hour is shown in 24-hour format (00 to 23). </summary>
            <seealso cref="P:FzFlexBox.TimeBehavior.Show24HourFormat"/>
        </member>
        <member name="F:FzFlexBox.DateTimeBehavior.Flag.WithSeconds">
            <summary> The seconds are also shown. </summary>
            <seealso cref="P:FzFlexBox.TimeBehavior.ShowSeconds"/>
        </member>
        <member name="T:FzFlexBox.Selection">
            <summary>
              Encapsulates a textbox's selection. </summary>
            <seealso cref="T:FzFlexBox.Selection.Saver"/>
        </member>
        <member name="M:FzFlexBox.Selection.#ctor(System.Windows.Forms.TextBoxBase)">
            <summary>
              Initializes a new instance of the Selection class by associating it with a TextBoxBase derived object. </summary>
            <param name="textBox">
              The TextBoxBase object for which the selection is being manipulated. </param>
            <seealso cref="T:System.Windows.Forms.TextBoxBase"/>	
        </member>
        <member name="M:FzFlexBox.Selection.#ctor(System.Windows.Forms.TextBoxBase,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the Selection class by associating it with a TextBoxBase derived object. 
              and then selecting text on it. </summary>
            <param name="textBox">
              The TextBoxBase object for which the selection is being manipulated. </param>
            <param name="start">
              The zero-based position where to start the selection. </param>
            <param name="end">
              The zero-based position where to end the selection.  If it's equal to the start position, no text is selected. </param>
            <seealso cref="T:System.Windows.Forms.TextBoxBase"/>	
        </member>
        <member name="M:FzFlexBox.Selection.Set(System.Int32,System.Int32)">
            <summary>
              Selects the textbox's text. </summary>
            <param name="start">
              The zero-based position where to start the selection. </param>
            <param name="end">
              The zero-based position where to end the selection.  If it's equal to the start position, no text is selected. </param>
            <remarks>
              The end must be greater than or equal to the start position. </remarks>
            <seealso cref="M:FzFlexBox.Selection.Get(System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:FzFlexBox.Selection.Get(System.Int32@,System.Int32@)">
            <summary>
              Retrieves the start and end position of the selection. </summary>
            <param name="start">
              The zero-based position where the selection starts. </param>
            <param name="end">
              The zero-based position where selection ends.  If it's equal to the start position, no text is selected. </param>
            <seealso cref="M:FzFlexBox.Selection.Set(System.Int32,System.Int32)"/>
        </member>
        <member name="M:FzFlexBox.Selection.Replace(System.String)">
            <summary>
              Replaces the text selected on the textbox. </summary>
            <param name="text">
              The text to replace the selection with. </param>
            <remarks>
              If nothing is selected, the text is inserted at the caret's position. </remarks>
            <seealso cref="M:FzFlexBox.Selection.SetAndReplace(System.Int32,System.Int32,System.String)"/>
        </member>
        <member name="M:FzFlexBox.Selection.SetAndReplace(System.Int32,System.Int32,System.String)">
            <summary>
              Selects the textbox's text and replaces it. </summary>
            <param name="start">
              The zero-based position where to start the selection. </param>
            <param name="end">
              The zero-based position where to end the selection.  If it's equal to the start position, no text is selected. </param>
            <param name="text">
              The text to replace the selection with. </param>
            <remarks>
              The end must be greater than or equal to the start position.
              If nothing gets selected, the text is inserted at the caret's position. </remarks>
            <seealso cref="M:FzFlexBox.Selection.Set(System.Int32,System.Int32)"/>
            <seealso cref="M:FzFlexBox.Selection.Replace(System.String)"/>
        </member>
        <member name="M:FzFlexBox.Selection.MoveBy(System.Int32,System.Int32)">
            <summary>
              Changes the selection's start and end positions by an offset. </summary>
            <param name="start">
              How much to change the start of the selection by. </param>
            <param name="end">
              How much to change the end of the selection by. </param>
            <seealso cref="M:FzFlexBox.Selection.Set(System.Int32,System.Int32)"/>	
        </member>
        <member name="M:FzFlexBox.Selection.MoveBy(System.Int32)">
            <summary>
              Changes the internal start and end positions by an offset. </summary>
            <param name="pos">
              How much to change the start and end of the selection by. </param>
            <seealso cref="M:FzFlexBox.Selection.Set(System.Int32,System.Int32)"/>	
        </member>
        <member name="M:FzFlexBox.Selection.op_Addition(FzFlexBox.Selection,System.Int32)">
            <summary>
              Creates a new Selection object with the internal start and end 
              positions changed by an offset. </summary>
            <param name="selection">
              The object with the original selection.  </param>
            <param name="pos">
              How much to change the start and end of the selection by on the resulting object. </param>
            <seealso cref="M:FzFlexBox.Selection.MoveBy(System.Int32,System.Int32)"/>	
            <seealso cref="M:FzFlexBox.Selection.Set(System.Int32,System.Int32)"/>	
        </member>
        <member name="E:FzFlexBox.Selection.TextChanging">
            <summary>
              Event used to notify that the selected text is about to change. </summary>
            <remarks>
              This event is fired by Replace right before it replaces the textbox's text. </remarks>
            <seealso cref="M:FzFlexBox.Selection.Replace(System.String)"/>
        </member>
        <member name="P:FzFlexBox.Selection.TextBox">
            <summary>
              Gets the TextBoxBase object associated with this Selection object. </summary>
        </member>
        <member name="P:FzFlexBox.Selection.Start">
            <summary>
              Gets or sets the zero-based position for the start of the selection. </summary>
            <seealso cref="P:FzFlexBox.Selection.End"/>	
            <seealso cref="P:FzFlexBox.Selection.Length"/>	
        </member>
        <member name="P:FzFlexBox.Selection.End">
            <summary>
              Gets or sets the zero-based position for the end of the selection. </summary>
            <seealso cref="P:FzFlexBox.Selection.Start"/>	
            <seealso cref="P:FzFlexBox.Selection.Length"/>	
        </member>
        <member name="P:FzFlexBox.Selection.Length">
            <summary>
              Gets or sets the length of the selection. </summary>
            <seealso cref="P:FzFlexBox.Selection.Start"/>	
            <seealso cref="P:FzFlexBox.Selection.End"/>	
        </member>
        <member name="T:FzFlexBox.Selection.Saver">
            <summary>
              Saves (and later restores) the current start and end position of a textbox selection. </summary>
            <remarks>
              This class saves the start and end position of the textbox with which it is constructed
              and then restores it when Restore is called.  Since this is a IDisposable class, it can also
              be used inside a <c>using</c> statement to Restore the selection (via Dispose). </remarks>
        </member>
        <member name="M:FzFlexBox.Selection.Saver.#ctor(System.Windows.Forms.TextBoxBase)">
            <summary>
              Initializes a new instance of the Saver class by associating it with a TextBoxBase derived object. </summary>
            <param name="textBox">
              The TextBoxBase object for which the selection is being saved. </param>
            <remarks>
              This constructor saves the textbox's start and end position of the selection inside private fields. </remarks>
            <seealso cref="T:System.Windows.Forms.TextBoxBase"/>	
        </member>
        <member name="M:FzFlexBox.Selection.Saver.#ctor(System.Windows.Forms.TextBoxBase,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the Saver class by associating it with a TextBoxBase derived object 
              and passing the start and end position of the selection. </summary>
            <param name="textBox">
              The TextBoxBase object for which the selection is being saved. </param>
            <param name="start">
              The zero-based start position of the selection. </param>
            <param name="end">
              The zero-based end position of the selection. It must not be less than the start position. </param>
            <remarks>
              This constructor does not save the textbox's start and end position of the selection.
              Instead, it saves the two given parameters. </remarks>
            <seealso cref="T:System.Windows.Forms.TextBoxBase"/>	
        </member>
        <member name="M:FzFlexBox.Selection.Saver.Restore">
            <summary>
              Restores the selection on the textbox to the saved start and end values. </summary>
            <remarks>
              This method checks that the textbox is still <see cref="M:FzFlexBox.Selection.Saver.Disable">available</see> 
              and if so restores the selection.  </remarks>
            <seealso cref="M:FzFlexBox.Selection.Saver.Disable"/>	
        </member>
        <member name="M:FzFlexBox.Selection.Saver.Dispose">
            <summary>
              Calls the <see cref="M:FzFlexBox.Selection.Saver.Restore"/> method. </summary>
        </member>
        <member name="M:FzFlexBox.Selection.Saver.MoveTo(System.Int32,System.Int32)">
            <summary>
              Changes the internal start and end positions. </summary>
            <param name="start">
              The new zero-based position for the start of the selection. </param>
            <param name="end">
              The new zero-based position for the end of the selection. It must not be less than the start position. </param>
            <seealso cref="M:FzFlexBox.Selection.Saver.MoveBy(System.Int32,System.Int32)"/>	
        </member>
        <member name="M:FzFlexBox.Selection.Saver.MoveBy(System.Int32,System.Int32)">
            <summary>
              Changes the internal start and end positions by an offset. </summary>
            <param name="start">
              How much to change the start of the selection by. </param>
            <param name="end">
              How much to change the end of the selection by. </param>
            <seealso cref="M:FzFlexBox.Selection.Saver.MoveTo(System.Int32,System.Int32)"/>	
        </member>
        <member name="M:FzFlexBox.Selection.Saver.MoveBy(System.Int32)">
            <summary>
              Changes the internal start and end positions by an offset. </summary>
            <param name="pos">
              How much to change the start and end of the selection by. </param>
            <seealso cref="M:FzFlexBox.Selection.Saver.MoveTo(System.Int32,System.Int32)"/>	
        </member>
        <member name="M:FzFlexBox.Selection.Saver.op_Addition(FzFlexBox.Selection.Saver,System.Int32)">
            <summary>
              Creates a new Saver object with the internal start and end 
              positions changed by an offset. </summary>
            <param name="saver">
              The object with the original saved selection.  </param>
            <param name="pos">
              How much to change the start and end of the selection by on the resulting object. </param>
            <seealso cref="M:FzFlexBox.Selection.Saver.MoveTo(System.Int32,System.Int32)"/>	
        </member>
        <member name="M:FzFlexBox.Selection.Saver.Update">
            <summary>
              Updates the internal start and end positions with the current selection on the textbox. </summary>
            <seealso cref="M:FzFlexBox.Selection.Saver.Disable"/>	
        </member>
        <member name="M:FzFlexBox.Selection.Saver.Disable">
            <summary>
              Disables restoring of the textbox's selection when <see cref="M:FzFlexBox.Selection.Saver.Dispose"/> is called. </summary>
            <seealso cref="M:FzFlexBox.Selection.Saver.Dispose"/>	
            <seealso cref="M:FzFlexBox.Selection.Saver.Update"/>	
        </member>
        <member name="P:FzFlexBox.Selection.Saver.TextBox">
            <summary>
              Gets the TextBoxBase object associated with this Saver object. </summary>
        </member>
        <member name="P:FzFlexBox.Selection.Saver.Start">
            <summary>
              Gets or sets the zero-based position for the start of the selection. </summary>
            <seealso cref="P:FzFlexBox.Selection.Saver.End"/>	
        </member>
        <member name="P:FzFlexBox.Selection.Saver.End">
            <summary>
              Gets or sets the zero-based position for the end of the selection. </summary>
            <seealso cref="P:FzFlexBox.Selection.Saver.Start"/>	
        </member>
        <member name="T:FzFlexBox.TextBox">
            <summary>
              Base class for all TextBox classes in this namespace. 
              It holds a Behavior object that may be associated to it by a derived class. </summary>
            <seealso cref="T:FzFlexBox.MaskedTextBox"/>
            <seealso cref="T:FzFlexBox.DateTextBox"/>
            <seealso cref="T:FzFlexBox.TimeTextBox"/>
            <seealso cref="T:FzFlexBox.DateTimeTextBox"/>
        </member>
        <member name="F:FzFlexBox.TextBox.m_behavior">
            <summary> The Behavior object associated with this TextBox. </summary>
        </member>
        <member name="M:FzFlexBox.TextBox.#ctor">
            <summary>
              Initializes a new instance of the TextBox class. </summary>
            <remarks>
              This constructor is just for convenience for derived classes.  It does nothing. </remarks>
        </member>
        <member name="M:FzFlexBox.TextBox.#ctor(FzFlexBox.Behavior)">
            <summary>
              Initializes a new instance of the TextBox class by explicitly assigning its Behavior field. </summary>
            <param name="behavior">
              The <see cref="T:FzFlexBox.Behavior"/> object to associate the textbox with. </param>
            <remarks>
              This constructor provides a way for derived classes to set the internal Behavior object
              to something other than the default value (such as <c>null</c>). </remarks>
        </member>
        <member name="M:FzFlexBox.TextBox.UpdateText">
            <summary>
              Checks if the textbox's text is valid and if not updates it with a valid value. </summary>
            <returns>
              If the textbox's text is updated (because it wasn't valid), the return value is true; otherwise it is false. </returns>
            <remarks>
              This method delegates to <see cref="M:FzFlexBox.Behavior.UpdateText">Behavior.UpdateText</see>. </remarks>
        </member>
        <member name="M:FzFlexBox.TextBox.ModifyFlags(System.Int32,System.Boolean)">
            <summary>
              Adds or removes flags from self's Behavior. </summary>
            <param name="flags">
              The bits to be turned on (ORed) or turned off in the internal flags member. </param>
            <param name="addOrRemove">
              If true the flags are added, otherwise they're removed. </param>
            <remarks>
              This method delegates to <see cref="M:FzFlexBox.Behavior.ModifyFlags(System.Int32,System.Boolean)">Behavior.ModifyFlags</see>. </remarks>
            <seealso cref="P:FzFlexBox.TextBox.Flags"/>
        </member>
        <member name="M:FzFlexBox.TextBox.Validate">
            <summary>
              Checks if the textbox's value is valid and if not proceeds according to the behavior's <see cref="P:FzFlexBox.TextBox.Flags"/>. </summary>
            <returns>
              If the validation succeeds, the return value is true; otherwise it is false. </returns>
            <remarks>
              This method delegates to <see cref="M:FzFlexBox.Behavior.Validate">Behavior.Validate</see>. </remarks>
            <seealso cref="M:FzFlexBox.TextBox.IsValid"/>
        </member>
        <member name="M:FzFlexBox.TextBox.IsValid">
            <summary>
              Checks if the textbox contains a valid value. </summary>
            <returns>
              If the value is valid, the return value is true; otherwise it is false. </returns>
            <remarks>
              This method delegates to <see cref="M:FzFlexBox.Behavior.IsValid">Behavior.IsValid</see>. </remarks>
            <seealso cref="M:FzFlexBox.TextBox.Validate"/>
        </member>
        <member name="M:FzFlexBox.TextBox.ShowErrorMessageBox(System.String)">
            <summary>
              Show an error message box. </summary>
            <param name="message">
              The message to show. </param>
            <remarks>
              This property delegates to <see cref="M:FzFlexBox.Behavior.ShowErrorMessageBox(System.String)">Behavior.ShowErrorMessageBox</see>. </remarks>
            <seealso cref="M:FzFlexBox.TextBox.ShowErrorIcon(System.String)"/>
            <seealso cref="P:FzFlexBox.TextBox.ErrorMessage"/>
        </member>
        <member name="M:FzFlexBox.TextBox.ShowErrorIcon(System.String)">
            <summary>
              Show a blinking icon next to the textbox with an error message. </summary>
            <param name="message">
              The message to show when the cursor is placed over the icon. </param>
            <remarks>
              This property delegates to <see cref="M:FzFlexBox.Behavior.ShowErrorIcon(System.String)">Behavior.ShowErrorIcon</see>. </remarks>
            <seealso cref="M:FzFlexBox.TextBox.ShowErrorMessageBox(System.String)"/>
            <seealso cref="P:FzFlexBox.TextBox.ErrorMessage"/>
        </member>
        <member name="P:FzFlexBox.TextBox.Flags">
            <summary>
              Gets or sets the flags associated with self's Behavior. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.Behavior.Flags">Behavior.Flags</see>. </remarks>
            <seealso cref="M:FzFlexBox.TextBox.ModifyFlags(System.Int32,System.Boolean)"/>
        </member>
        <member name="P:FzFlexBox.TextBox.ErrorMessage">
            <summary>
              Gets the error message used to notify the user to enter a valid value. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.Behavior.ErrorMessage">Behavior.ErrorMessage</see>. </remarks>
            <seealso cref="M:FzFlexBox.TextBox.Validate"/>
            <seealso cref="M:FzFlexBox.TextBox.IsValid"/>
        </member>
        <member name="T:FzFlexBox.TextBox.Designer">
            <summary>
              Designer class used to prevent the Text property from being set to
              some default value (ie. textBox1) and to remove any properties the designer 
              should not generate code for. </summary>
        </member>
        <member name="M:FzFlexBox.TextBox.Designer.OnSetComponentDefaults">
            <summary>
              This typically sets the control's Text property.  
              Here it does nothing so the Text is left blank. </summary>
        </member>
        <member name="T:FzFlexBox.MaskedTextBox">
            <summary>
              TextBox class which supports the <see cref="T:FzFlexBox.MaskedBehavior">Masked</see> behavior. </summary>	
        </member>
        <member name="M:FzFlexBox.MaskedTextBox.#ctor">
            <summary>
              Initializes a new instance of the MaskedTextBox class by assigning its Behavior field
              to an instance of <see cref="T:FzFlexBox.MaskedBehavior"/>. </summary>
        </member>
        <member name="M:FzFlexBox.MaskedTextBox.#ctor(System.String)">
            <summary>
              Initializes a new instance of the MaskedTextBox class by assigning its Behavior field
              to an instance of <see cref="T:FzFlexBox.MaskedBehavior"/> and setting its mask. </summary>
            <param name="mask">
              The mask string to use for validating and/or formatting the characters entered by the user. 
              By default, the <c>#</c> symbol is configured to represent a digit placeholder on the mask. </param>
        </member>
        <member name="M:FzFlexBox.MaskedTextBox.#ctor(FzFlexBox.MaskedBehavior)">
            <summary>
              Initializes a new instance of the MaskedTextBox class by explicitly assigning its Behavior field. </summary>
            <param name="behavior">
              The <see cref="T:FzFlexBox.MaskedBehavior"/> object to associate the textbox with. </param>
        </member>
        <member name="P:FzFlexBox.MaskedTextBox.Behavior">
            <summary>
              Gets the Behavior object associated with this class. </summary>
        </member>
        <member name="P:FzFlexBox.MaskedTextBox.Mask">
            <summary>
              Gets or sets the mask -- the string used for validating and/or formatting 
              the characters entered by the user.. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.MaskedBehavior.Mask">MaskedBehavior.Mask</see>. </remarks>
            <seealso cref="P:FzFlexBox.MaskedBehavior.Mask"/>
        </member>
        <member name="P:FzFlexBox.MaskedTextBox.Symbols">
            <summary>
              Gets the ArrayList of Symbol objects. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.MaskedBehavior.Symbols">MaskedBehavior.Symbols</see>. </remarks>
            <seealso cref="P:FzFlexBox.MaskedTextBox.Mask"/>
            <seealso cref="T:FzFlexBox.MaskedBehavior.Symbol"/>
        </member>
        <member name="P:FzFlexBox.MaskedTextBox.NumericText">
            <summary>
              Retrieves the textbox's value without any non-numeric characters. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.MaskedBehavior.NumericText">MaskedBehavior.NumericText</see>. </remarks>
        </member>
        <member name="T:FzFlexBox.DateTextBox">
            <summary>
              TextBox class which supports the <see cref="T:FzFlexBox.DateBehavior">Date</see> behavior. </summary>	
        </member>
        <member name="M:FzFlexBox.DateTextBox.#ctor">
            <summary>
              Initializes a new instance of the DateTextBox class by assigning its Behavior field
              to an instance of <see cref="T:FzFlexBox.DateBehavior"/>. </summary>
        </member>
        <member name="M:FzFlexBox.DateTextBox.#ctor(FzFlexBox.DateBehavior)">
            <summary>
              Initializes a new instance of the DateTextBox class by explicitly assigning its Behavior field. </summary>
            <param name="behavior">
              The <see cref="T:FzFlexBox.DateBehavior"/> object to associate the textbox with. </param>
        </member>
        <member name="M:FzFlexBox.DateTextBox.SetDate(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the month, day, and year on the textbox. </summary>
            <param name="year">
              The year to set. </param>
            <param name="month">
              The month to set. </param>
            <param name="day">
              The day to set. </param>
            <remarks>
              This method delegates to <see cref="M:FzFlexBox.DateBehavior.SetDate(System.Int32,System.Int32,System.Int32)">DateBehavior.SetDate</see>. </remarks>
        </member>
        <member name="P:FzFlexBox.DateTextBox.Behavior">
            <summary>
              Gets the Behavior object associated with this class. </summary>
        </member>
        <member name="P:FzFlexBox.DateTextBox.Month">
            <summary>
              Gets or sets the month on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid month. </exception>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateBehavior.Month">DateBehavior.Month</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTextBox.Day"/>
            <seealso cref="P:FzFlexBox.DateTextBox.Year"/>
        </member>
        <member name="P:FzFlexBox.DateTextBox.Day">
            <summary>
              Gets or sets the day on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid day. </exception>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateBehavior.Day">DateBehavior.Day</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTextBox.Month"/>
            <seealso cref="P:FzFlexBox.DateTextBox.Year"/>
        </member>
        <member name="P:FzFlexBox.DateTextBox.Year">
            <summary>
              Gets or sets the year on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid year. </exception>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateBehavior.Year">DateBehavior.Year</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTextBox.Month"/>
            <seealso cref="P:FzFlexBox.DateTextBox.Day"/>
        </member>
        <member name="P:FzFlexBox.DateTextBox.Value">
            <summary>
              Gets or sets the month, day, and year on the textbox using a <see cref="T:System.DateTime"/> object. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateBehavior.Value">DateBehavior.Value</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTextBox.Month"/>
            <seealso cref="P:FzFlexBox.DateTextBox.Day"/>
            <seealso cref="P:FzFlexBox.DateTextBox.Year"/>
        </member>
        <member name="P:FzFlexBox.DateTextBox.RangeMin">
            <summary>
              Gets or sets the minimum value allowed. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateBehavior.RangeMin">DateBehavior.RangeMin</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTextBox.RangeMax"/>
        </member>
        <member name="P:FzFlexBox.DateTextBox.RangeMax">
            <summary>
              Gets or sets the maximum value allowed. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateBehavior.RangeMax">DateBehavior.RangeMax</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTextBox.RangeMin"/>
        </member>
        <member name="P:FzFlexBox.DateTextBox.Separator">
            <summary>
              Gets or sets the character used to separate the month, day, and year values of the date. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateBehavior.Separator">DateBehavior.Separator</see>. </remarks>
        </member>
        <member name="P:FzFlexBox.DateTextBox.ShowDayBeforeMonth">
            <summary>
              Gets or sets whether the day should be shown before the month or after it. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateBehavior.ShowDayBeforeMonth">DateBehavior.ShowDayBeforeMonth</see>. </remarks>
            <seealso cref="F:FzFlexBox.DateBehavior.Flag.DayBeforeMonth"/>
        </member>
        <member name="T:FzFlexBox.DateTextBox.Designer">
            <summary>
              Designer class used to prevent the Text property from being set to
              some default value (ie. textBox1) and to remove properties the designer 
              should not generate code for. </summary>
        </member>
        <member name="M:FzFlexBox.DateTextBox.Designer.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
              Removes properties that the form designer should not generate code for
              when the DateTextBox control is added to a form. </summary>
            <param name="properties">
              The dictionary of properties to be manipulated. </param>
        </member>
        <member name="T:FzFlexBox.TimeTextBox">
            <summary>
              TextBox class which supports the <see cref="T:FzFlexBox.TimeBehavior">Time</see> behavior. </summary>	
        </member>
        <member name="M:FzFlexBox.TimeTextBox.#ctor">
            <summary>
              Initializes a new instance of the TimeTextBox class by assigning its Behavior field
              to an instance of <see cref="T:FzFlexBox.TimeBehavior"/>. </summary>
        </member>
        <member name="M:FzFlexBox.TimeTextBox.#ctor(FzFlexBox.TimeBehavior)">
            <summary>
              Initializes a new instance of the TimeTextBox class by explicitly assigning its Behavior field. </summary>
            <param name="behavior">
              The <see cref="T:FzFlexBox.TimeBehavior"/> object to associate the textbox with. </param>
        </member>
        <member name="M:FzFlexBox.TimeTextBox.SetTime(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the hour, minute, and second on the textbox. </summary>
            <param name="hour">
              The hour to set, between 0 and 23. </param>
            <param name="minute">
              The minute to set, between 0 and 59. </param>
            <param name="second">
              The second to set, between 0 and 59. </param>
            <remarks>
              This method delegates to <see cref="M:FzFlexBox.TimeBehavior.SetTime(System.Int32,System.Int32,System.Int32)">TimeBehavior.SetTime</see>. </remarks>
        </member>
        <member name="M:FzFlexBox.TimeTextBox.SetTime(System.Int32,System.Int32)">
            <summary>
              Sets the hour and minute on the textbox. </summary>
            <param name="hour">
              The hour to set, between 0 and 23. </param>
            <param name="minute">
              The minute to set, between 0 and 59. </param>
            <remarks>
              This method delegates to <see cref="M:FzFlexBox.TimeBehavior.SetTime(System.Int32,System.Int32,System.Int32)">TimeBehavior.SetTime</see>. </remarks>
        </member>
        <member name="P:FzFlexBox.TimeTextBox.Behavior">
            <summary>
              Gets the Behavior object associated with this class. </summary>
        </member>
        <member name="P:FzFlexBox.TimeTextBox.Hour">
            <summary>
              Gets or sets the hour on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid hour. </exception>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.TimeBehavior.Hour">TimeBehavior.Hour</see>. </remarks>
            <seealso cref="P:FzFlexBox.TimeTextBox.Minute"/>
            <seealso cref="P:FzFlexBox.TimeTextBox.Second"/>
        </member>
        <member name="P:FzFlexBox.TimeTextBox.Minute">
            <summary>
              Gets or sets the minute on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid minute. </exception>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.TimeBehavior.Minute">TimeBehavior.Minute</see>. </remarks>
            <seealso cref="P:FzFlexBox.TimeTextBox.Hour"/>
            <seealso cref="P:FzFlexBox.TimeTextBox.Second"/>
        </member>
        <member name="P:FzFlexBox.TimeTextBox.Second">
            <summary>
              Gets or sets the second on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid second. </exception>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.TimeBehavior.Second">TimeBehavior.Second</see>. </remarks>
            <seealso cref="P:FzFlexBox.TimeTextBox.Hour"/>
            <seealso cref="P:FzFlexBox.TimeTextBox.Minute"/>
        </member>
        <member name="P:FzFlexBox.TimeTextBox.AMPM">
            <summary>
              Gets AM/PM symbol on the textbox. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.TimeBehavior.AMPM">TimeBehavior.AMPM</see>. </remarks>
            <seealso cref="P:FzFlexBox.TimeTextBox.Hour"/>
            <seealso cref="P:FzFlexBox.TimeTextBox.Minute"/>
            <seealso cref="P:FzFlexBox.TimeTextBox.Second"/>
        </member>
        <member name="P:FzFlexBox.TimeTextBox.Value">
            <summary>
              Gets or sets the hour, minute, and second on the textbox using a <see cref="T:System.DateTime"/> object. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.TimeBehavior.Value">TimeBehavior.Value</see>. </remarks>
            <seealso cref="P:FzFlexBox.TimeTextBox.Hour"/>
            <seealso cref="P:FzFlexBox.TimeTextBox.Minute"/>
            <seealso cref="P:FzFlexBox.TimeTextBox.Second"/>
        </member>
        <member name="P:FzFlexBox.TimeTextBox.RangeMin">
            <summary>
              Gets or sets the minimum value allowed. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.TimeBehavior.RangeMin">TimeBehavior.RangeMin</see>. </remarks>
            <seealso cref="P:FzFlexBox.TimeTextBox.RangeMax"/>
        </member>
        <member name="P:FzFlexBox.TimeTextBox.RangeMax">
            <summary>
              Gets or sets the maximum value allowed. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.TimeBehavior.RangeMax">TimeBehavior.RangeMax</see>. </remarks>
            <seealso cref="P:FzFlexBox.TimeTextBox.RangeMin"/>
        </member>
        <member name="P:FzFlexBox.TimeTextBox.Separator">
            <summary>
              Gets or sets the character used to separate the hour, minute, and second values of the time. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.TimeBehavior.Separator">TimeBehavior.Separator</see>. </remarks>
        </member>
        <member name="P:FzFlexBox.TimeTextBox.Show24HourFormat">
            <summary>
              Gets or sets whether the hour should be shown in 24-hour format. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.TimeBehavior.Show24HourFormat">TimeBehavior.Show24HourFormat</see>. </remarks>
            <seealso cref="F:FzFlexBox.TimeBehavior.Flag.TwentyFourHourFormat"/>
        </member>
        <member name="P:FzFlexBox.TimeTextBox.ShowSeconds">
            <summary>
              Gets or sets whether the seconds should be shown (after the minutes). </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.TimeBehavior.ShowSeconds">TimeBehavior.ShowSeconds</see>. </remarks>
            <seealso cref="F:FzFlexBox.TimeBehavior.Flag.WithSeconds"/>
        </member>
        <member name="T:FzFlexBox.TimeTextBox.Designer">
            <summary>
              Designer class used to prevent the Text property from being set to
              some default value (ie. textBox1) and to remove properties the designer 
              should not generate code for. </summary>
        </member>
        <member name="M:FzFlexBox.TimeTextBox.Designer.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
              Removes properties that the form designer should not generate code for
              when the TimeTextBox control is added to a form. </summary>
            <param name="properties">
              The dictionary of properties to be manipulated. </param>
        </member>
        <member name="T:FzFlexBox.DateTimeTextBox">
            <summary>
              TextBox class which supports the <see cref="T:FzFlexBox.DateTimeBehavior">DateTime</see> behavior. </summary>	
        </member>
        <member name="M:FzFlexBox.DateTimeTextBox.#ctor">
            <summary>
              Initializes a new instance of the DateTimeTextBox class by assigning its Behavior field
              to an instance of <see cref="T:FzFlexBox.DateTimeBehavior"/>. </summary>
        </member>
        <member name="M:FzFlexBox.DateTimeTextBox.#ctor(FzFlexBox.DateTimeBehavior)">
            <summary>
              Initializes a new instance of the DateTimeTextBox class by explicitly assigning its Behavior field. </summary>
            <param name="behavior">
              The <see cref="T:FzFlexBox.DateTimeBehavior"/> object to associate the textbox with. </param>
        </member>
        <member name="M:FzFlexBox.DateTimeTextBox.SetDate(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the month, day, and year on the textbox. </summary>
            <param name="year">
              The year to set. </param>
            <param name="month">
              The month to set. </param>
            <param name="day">
              The day to set. </param>
            <remarks>
              This method delegates to <see cref="M:FzFlexBox.DateTimeBehavior.SetDate(System.Int32,System.Int32,System.Int32)">DateTimeBehavior.SetDate</see>. </remarks>
        </member>
        <member name="M:FzFlexBox.DateTimeTextBox.SetDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the month, day, year, hour, minute, and second on the textbox. </summary>
            <param name="year">
              The year to set. </param>
            <param name="month">
              The month to set. </param>
            <param name="day">
              The day to set. </param>
            <param name="hour">
              The hour to set, between 0 and 23. </param>
            <param name="minute">
              The minute to set, between 0 and 59. </param>
            <remarks>
              This method delegates to <see cref="M:FzFlexBox.DateTimeBehavior.SetDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">DateTimeBehavior.SetDateTime</see>. </remarks>
        </member>
        <member name="M:FzFlexBox.DateTimeTextBox.SetDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the month, day, year, hour, minute, and second on the textbox. </summary>
            <param name="year">
              The year to set. </param>
            <param name="month">
              The month to set. </param>
            <param name="day">
              The day to set. </param>
            <param name="hour">
              The hour to set, between 0 and 23. </param>
            <param name="minute">
              The minute to set, between 0 and 59. </param>
            <param name="second">
              The second to set, between 0 and 59. </param>
            <remarks>
              This method delegates to <see cref="M:FzFlexBox.DateTimeBehavior.SetDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">DateTimeBehavior.SetDateTime</see>. </remarks>
        </member>
        <member name="P:FzFlexBox.DateTimeTextBox.Behavior">
            <summary>
              Gets the Behavior object associated with this class. </summary>
        </member>
        <member name="P:FzFlexBox.DateTimeTextBox.Month">
            <summary>
              Gets or sets the month on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid month. </exception>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateTimeBehavior.Month">DateTimeBehavior.Month</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTimeTextBox.Day"/>
            <seealso cref="P:FzFlexBox.DateTimeTextBox.Year"/>
        </member>
        <member name="P:FzFlexBox.DateTimeTextBox.Day">
            <summary>
              Gets or sets the day on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid day. </exception>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateTimeBehavior.Day">DateTimeBehavior.Day</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTimeTextBox.Month"/>
            <seealso cref="P:FzFlexBox.DateTimeTextBox.Year"/>
        </member>
        <member name="P:FzFlexBox.DateTimeTextBox.Year">
            <summary>
              Gets or sets the year on the textbox. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Setting this property with an invalid year. </exception>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateTimeBehavior.Year">DateTimeBehavior.Year</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTimeTextBox.Month"/>
            <seealso cref="P:FzFlexBox.DateTimeTextBox.Day"/>
        </member>
        <member name="P:FzFlexBox.DateTimeTextBox.Value">
            <summary>
              Gets or sets the month, day, and year on the textbox using a <see cref="T:System.DateTime"/> object. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateTimeBehavior.Value">DateTimeBehavior.Value</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTimeTextBox.Month"/>
            <seealso cref="P:FzFlexBox.DateTimeTextBox.Day"/>
            <seealso cref="P:FzFlexBox.DateTimeTextBox.Year"/>
        </member>
        <member name="P:FzFlexBox.DateTimeTextBox.RangeMin">
            <summary>
              Gets or sets the minimum value allowed. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateTimeBehavior.RangeMin">DateTimeBehavior.RangeMin</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTimeTextBox.RangeMax"/>
        </member>
        <member name="P:FzFlexBox.DateTimeTextBox.RangeMax">
            <summary>
              Gets or sets the maximum value allowed. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateTimeBehavior.RangeMax">DateTimeBehavior.RangeMax</see>. </remarks>
            <seealso cref="P:FzFlexBox.DateTimeTextBox.RangeMin"/>
        </member>
        <member name="P:FzFlexBox.DateTimeTextBox.DateSeparator">
            <summary>
              Gets or sets the character used to separate the month, day, and year values of the date. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateTimeBehavior.DateSeparator">DateTimeBehavior.DateSeparator</see>. </remarks>
        </member>
        <member name="P:FzFlexBox.DateTimeTextBox.TimeSeparator">
            <summary>
              Gets or sets the character used to separate the hour, minute, and second values of the time. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateTimeBehavior.TimeSeparator">DateTimeBehavior.TimeSeparator</see>. </remarks>
        </member>
        <member name="P:FzFlexBox.DateTimeTextBox.Separator">
            <summary>
              Gets the character used to separate the date or time value. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateTimeBehavior.Separator">DateTimeBehavior.Separator</see>. </remarks>
        </member>
        <member name="P:FzFlexBox.DateTimeTextBox.ShowDayBeforeMonth">
            <summary>
              Gets or sets whether the day should be shown before the month or after it. </summary>
            <remarks>
              This property delegates to <see cref="P:FzFlexBox.DateBehavior.ShowDayBeforeMonth">DateBehavior.ShowDayBeforeMonth</see>. </remarks>
            <seealso cref="F:FzFlexBox.DateBehavior.Flag.DayBeforeMonth"/>
        </member>
        <member name="T:FzFlexBox.DateTimeTextBox.Designer">
            <summary>
              Designer class used to prevent the Text property from being set to
              some default value (ie. textBox1) and to remove properties the designer 
              should not generate code for. </summary>
        </member>
        <member name="M:FzFlexBox.DateTimeTextBox.Designer.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
              Removes properties that the form designer should not generate code for
              when the DateTimeTextBox control is added to a form. </summary>
            <param name="properties">
              The dictionary of properties to be manipulated. </param>
        </member>
    </members>
</doc>
